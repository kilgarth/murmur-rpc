// Copyright 2005-2020 The Mumble Developers. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file at the root of the
// Mumble source tree or at <https://www.mumble.info/LICENSE>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.3
// source: MurmurRPC.proto

package MurmurRPC

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Server_Event_Type int32

const (
	Server_Event_UserConnected       Server_Event_Type = 0
	Server_Event_UserDisconnected    Server_Event_Type = 1
	Server_Event_UserStateChanged    Server_Event_Type = 2
	Server_Event_UserTextMessage     Server_Event_Type = 3
	Server_Event_ChannelCreated      Server_Event_Type = 4
	Server_Event_ChannelRemoved      Server_Event_Type = 5
	Server_Event_ChannelStateChanged Server_Event_Type = 6
)

// Enum value maps for Server_Event_Type.
var (
	Server_Event_Type_name = map[int32]string{
		0: "UserConnected",
		1: "UserDisconnected",
		2: "UserStateChanged",
		3: "UserTextMessage",
		4: "ChannelCreated",
		5: "ChannelRemoved",
		6: "ChannelStateChanged",
	}
	Server_Event_Type_value = map[string]int32{
		"UserConnected":       0,
		"UserDisconnected":    1,
		"UserStateChanged":    2,
		"UserTextMessage":     3,
		"ChannelCreated":      4,
		"ChannelRemoved":      5,
		"ChannelStateChanged": 6,
	}
)

func (x Server_Event_Type) Enum() *Server_Event_Type {
	p := new(Server_Event_Type)
	*p = x
	return p
}

func (x Server_Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Server_Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_MurmurRPC_proto_enumTypes[0].Descriptor()
}

func (Server_Event_Type) Type() protoreflect.EnumType {
	return &file_MurmurRPC_proto_enumTypes[0]
}

func (x Server_Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Server_Event_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Server_Event_Type(num)
	return nil
}

// Deprecated: Use Server_Event_Type.Descriptor instead.
func (Server_Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{3, 0, 0}
}

type Event_Type int32

const (
	Event_ServerStopped Event_Type = 0
	Event_ServerStarted Event_Type = 1
)

// Enum value maps for Event_Type.
var (
	Event_Type_name = map[int32]string{
		0: "ServerStopped",
		1: "ServerStarted",
	}
	Event_Type_value = map[string]int32{
		"ServerStopped": 0,
		"ServerStarted": 1,
	}
)

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}

func (x Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_MurmurRPC_proto_enumTypes[1].Descriptor()
}

func (Event_Type) Type() protoreflect.EnumType {
	return &file_MurmurRPC_proto_enumTypes[1]
}

func (x Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Event_Type) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Event_Type(num)
	return nil
}

// Deprecated: Use Event_Type.Descriptor instead.
func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{4, 0}
}

type ContextAction_Context int32

const (
	ContextAction_Server  ContextAction_Context = 1
	ContextAction_Channel ContextAction_Context = 2
	ContextAction_User    ContextAction_Context = 4
)

// Enum value maps for ContextAction_Context.
var (
	ContextAction_Context_name = map[int32]string{
		1: "Server",
		2: "Channel",
		4: "User",
	}
	ContextAction_Context_value = map[string]int32{
		"Server":  1,
		"Channel": 2,
		"User":    4,
	}
)

func (x ContextAction_Context) Enum() *ContextAction_Context {
	p := new(ContextAction_Context)
	*p = x
	return p
}

func (x ContextAction_Context) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextAction_Context) Descriptor() protoreflect.EnumDescriptor {
	return file_MurmurRPC_proto_enumTypes[2].Descriptor()
}

func (ContextAction_Context) Type() protoreflect.EnumType {
	return &file_MurmurRPC_proto_enumTypes[2]
}

func (x ContextAction_Context) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ContextAction_Context) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ContextAction_Context(num)
	return nil
}

// Deprecated: Use ContextAction_Context.Descriptor instead.
func (ContextAction_Context) EnumDescriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{5, 0}
}

type TextMessage_Filter_Action int32

const (
	// Accept the message.
	TextMessage_Filter_Accept TextMessage_Filter_Action = 0
	// Reject the message with a permission error.
	TextMessage_Filter_Reject TextMessage_Filter_Action = 1
	// Silently drop the message.
	TextMessage_Filter_Drop TextMessage_Filter_Action = 2
)

// Enum value maps for TextMessage_Filter_Action.
var (
	TextMessage_Filter_Action_name = map[int32]string{
		0: "Accept",
		1: "Reject",
		2: "Drop",
	}
	TextMessage_Filter_Action_value = map[string]int32{
		"Accept": 0,
		"Reject": 1,
		"Drop":   2,
	}
)

func (x TextMessage_Filter_Action) Enum() *TextMessage_Filter_Action {
	p := new(TextMessage_Filter_Action)
	*p = x
	return p
}

func (x TextMessage_Filter_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextMessage_Filter_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_MurmurRPC_proto_enumTypes[3].Descriptor()
}

func (TextMessage_Filter_Action) Type() protoreflect.EnumType {
	return &file_MurmurRPC_proto_enumTypes[3]
}

func (x TextMessage_Filter_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TextMessage_Filter_Action) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TextMessage_Filter_Action(num)
	return nil
}

// Deprecated: Use TextMessage_Filter_Action.Descriptor instead.
func (TextMessage_Filter_Action) EnumDescriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{6, 0, 0}
}

type ACL_Permission int32

const (
	ACL_None                 ACL_Permission = 0
	ACL_Write                ACL_Permission = 1
	ACL_Traverse             ACL_Permission = 2
	ACL_Enter                ACL_Permission = 4
	ACL_Speak                ACL_Permission = 8
	ACL_Whisper              ACL_Permission = 256
	ACL_MuteDeafen           ACL_Permission = 16
	ACL_Move                 ACL_Permission = 32
	ACL_MakeChannel          ACL_Permission = 64
	ACL_MakeTemporaryChannel ACL_Permission = 1024
	ACL_LinkChannel          ACL_Permission = 128
	ACL_TextMessage          ACL_Permission = 512
	ACL_Kick                 ACL_Permission = 65536
	ACL_Ban                  ACL_Permission = 131072
	ACL_Register             ACL_Permission = 262144
	ACL_RegisterSelf         ACL_Permission = 524288
)

// Enum value maps for ACL_Permission.
var (
	ACL_Permission_name = map[int32]string{
		0:      "None",
		1:      "Write",
		2:      "Traverse",
		4:      "Enter",
		8:      "Speak",
		256:    "Whisper",
		16:     "MuteDeafen",
		32:     "Move",
		64:     "MakeChannel",
		1024:   "MakeTemporaryChannel",
		128:    "LinkChannel",
		512:    "TextMessage",
		65536:  "Kick",
		131072: "Ban",
		262144: "Register",
		524288: "RegisterSelf",
	}
	ACL_Permission_value = map[string]int32{
		"None":                 0,
		"Write":                1,
		"Traverse":             2,
		"Enter":                4,
		"Speak":                8,
		"Whisper":              256,
		"MuteDeafen":           16,
		"Move":                 32,
		"MakeChannel":          64,
		"MakeTemporaryChannel": 1024,
		"LinkChannel":          128,
		"TextMessage":          512,
		"Kick":                 65536,
		"Ban":                  131072,
		"Register":             262144,
		"RegisterSelf":         524288,
	}
)

func (x ACL_Permission) Enum() *ACL_Permission {
	p := new(ACL_Permission)
	*p = x
	return p
}

func (x ACL_Permission) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ACL_Permission) Descriptor() protoreflect.EnumDescriptor {
	return file_MurmurRPC_proto_enumTypes[4].Descriptor()
}

func (ACL_Permission) Type() protoreflect.EnumType {
	return &file_MurmurRPC_proto_enumTypes[4]
}

func (x ACL_Permission) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ACL_Permission) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ACL_Permission(num)
	return nil
}

// Deprecated: Use ACL_Permission.Descriptor instead.
func (ACL_Permission) EnumDescriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{13, 0}
}

type Authenticator_Response_Status int32

const (
	// The request should fallthrough to murmur's default action.
	Authenticator_Response_Fallthrough Authenticator_Response_Status = 0
	// The request was successful.
	Authenticator_Response_Success Authenticator_Response_Status = 1
	// The request failed; there was some error.
	Authenticator_Response_Failure Authenticator_Response_Status = 2
	// A temporary failure prevented the request from succeeding (e.g. a
	// database was unavailable).
	Authenticator_Response_TemporaryFailure Authenticator_Response_Status = 3
)

// Enum value maps for Authenticator_Response_Status.
var (
	Authenticator_Response_Status_name = map[int32]string{
		0: "Fallthrough",
		1: "Success",
		2: "Failure",
		3: "TemporaryFailure",
	}
	Authenticator_Response_Status_value = map[string]int32{
		"Fallthrough":      0,
		"Success":          1,
		"Failure":          2,
		"TemporaryFailure": 3,
	}
)

func (x Authenticator_Response_Status) Enum() *Authenticator_Response_Status {
	p := new(Authenticator_Response_Status)
	*p = x
	return p
}

func (x Authenticator_Response_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Authenticator_Response_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_MurmurRPC_proto_enumTypes[5].Descriptor()
}

func (Authenticator_Response_Status) Type() protoreflect.EnumType {
	return &file_MurmurRPC_proto_enumTypes[5]
}

func (x Authenticator_Response_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Authenticator_Response_Status) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Authenticator_Response_Status(num)
	return nil
}

// Deprecated: Use Authenticator_Response_Status.Descriptor instead.
func (Authenticator_Response_Status) EnumDescriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 0}
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{0}
}

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 2-byte Major, 1-byte Minor and 1-byte Patch version number.
	Version *uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// Client release name.
	Release *string `protobuf:"bytes,2,opt,name=release" json:"release,omitempty"`
	// Client OS name.
	Os *string `protobuf:"bytes,3,opt,name=os" json:"os,omitempty"`
	// Client OS version.
	OsVersion *string `protobuf:"bytes,4,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{1}
}

func (x *Version) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Version) GetRelease() string {
	if x != nil && x.Release != nil {
		return *x.Release
	}
	return ""
}

func (x *Version) GetOs() string {
	if x != nil && x.Os != nil {
		return *x.Os
	}
	return ""
}

func (x *Version) GetOsVersion() string {
	if x != nil && x.OsVersion != nil {
		return *x.OsVersion
	}
	return ""
}

type Uptime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of seconds from the starting time.
	Secs *uint64 `protobuf:"varint,1,opt,name=secs" json:"secs,omitempty"`
}

func (x *Uptime) Reset() {
	*x = Uptime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uptime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uptime) ProtoMessage() {}

func (x *Uptime) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uptime.ProtoReflect.Descriptor instead.
func (*Uptime) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{2}
}

func (x *Uptime) GetSecs() uint64 {
	if x != nil && x.Secs != nil {
		return *x.Secs
	}
	return 0
}

type Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique server ID.
	Id *uint32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Is the server currently running?
	Running *bool `protobuf:"varint,2,opt,name=running" json:"running,omitempty"`
	// The update of the server.
	Uptime *Uptime `protobuf:"bytes,3,opt,name=uptime" json:"uptime,omitempty"`
}

func (x *Server) Reset() {
	*x = Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server) ProtoMessage() {}

func (x *Server) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server.ProtoReflect.Descriptor instead.
func (*Server) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{3}
}

func (x *Server) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Server) GetRunning() bool {
	if x != nil && x.Running != nil {
		return *x.Running
	}
	return false
}

func (x *Server) GetUptime() *Uptime {
	if x != nil {
		return x.Uptime
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server for which the event happened.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The type of event that happened.
	Type *Event_Type `protobuf:"varint,2,opt,name=type,enum=MurmurRPC.Event_Type" json:"type,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{4}
}

func (x *Event) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Event) GetType() Event_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Event_ServerStopped
}

type ContextAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the action is.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The context in which the action is.
	Context *uint32 `protobuf:"varint,2,opt,name=context" json:"context,omitempty"`
	// The action name.
	Action *string `protobuf:"bytes,3,opt,name=action" json:"action,omitempty"`
	// The user-visible descriptive name of the action.
	Text *string `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	// The user that triggered the ContextAction.
	Actor *User `protobuf:"bytes,5,opt,name=actor" json:"actor,omitempty"`
	// The user on which the ContextAction was triggered.
	User *User `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// The channel on which the ContextAction was triggered.
	Channel *Channel `protobuf:"bytes,7,opt,name=channel" json:"channel,omitempty"`
}

func (x *ContextAction) Reset() {
	*x = ContextAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextAction) ProtoMessage() {}

func (x *ContextAction) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextAction.ProtoReflect.Descriptor instead.
func (*ContextAction) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{5}
}

func (x *ContextAction) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ContextAction) GetContext() uint32 {
	if x != nil && x.Context != nil {
		return *x.Context
	}
	return 0
}

func (x *ContextAction) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *ContextAction) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *ContextAction) GetActor() *User {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *ContextAction) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ContextAction) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type TextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the TextMessage originates.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The user who sent the message.
	Actor *User `protobuf:"bytes,2,opt,name=actor" json:"actor,omitempty"`
	// The users to whom the message is sent.
	Users []*User `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	// The channels to which the message is sent.
	Channels []*Channel `protobuf:"bytes,4,rep,name=channels" json:"channels,omitempty"`
	// The channels to which the message is sent, including the channels'
	// ancestors.
	Trees []*Channel `protobuf:"bytes,5,rep,name=trees" json:"trees,omitempty"`
	// The message body that is sent.
	Text *string `protobuf:"bytes,6,opt,name=text" json:"text,omitempty"`
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{6}
}

func (x *TextMessage) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *TextMessage) GetActor() *User {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *TextMessage) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *TextMessage) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *TextMessage) GetTrees() []*Channel {
	if x != nil {
		return x.Trees
	}
	return nil
}

func (x *TextMessage) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the log message was generated.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The unix timestamp of when the message was generated.
	Timestamp *int64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// The log message.
	Text *string `protobuf:"bytes,3,opt,name=text" json:"text,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{7}
}

func (x *Log) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Log) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *Log) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server for which the configuration is for.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The configuration keys and values.
	Fields map[string]string `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{8}
}

func (x *Config) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Config) GetFields() map[string]string {
	if x != nil {
		return x.Fields
	}
	return nil
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the channel exists.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The unique channel identifier.
	Id *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// The channel name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The channel's parent.
	Parent *Channel `protobuf:"bytes,4,opt,name=parent" json:"parent,omitempty"`
	// Linked channels.
	Links []*Channel `protobuf:"bytes,5,rep,name=links" json:"links,omitempty"`
	// The channel's description.
	Description *string `protobuf:"bytes,6,opt,name=description" json:"description,omitempty"`
	// Is the channel temporary?
	Temporary *bool `protobuf:"varint,7,opt,name=temporary" json:"temporary,omitempty"`
	// The position in which the channel should appear in a sorted list.
	Position *int32 `protobuf:"varint,8,opt,name=position" json:"position,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{9}
}

func (x *Channel) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Channel) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Channel) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Channel) GetParent() *Channel {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *Channel) GetLinks() []*Channel {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Channel) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Channel) GetTemporary() bool {
	if x != nil && x.Temporary != nil {
		return *x.Temporary
	}
	return false
}

func (x *Channel) GetPosition() int32 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server to which the user is connected.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The user's session ID.
	Session *uint32 `protobuf:"varint,2,opt,name=session" json:"session,omitempty"`
	// The user's registered ID.
	Id *uint32 `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
	// The user's name.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Is the user muted?
	Mute *bool `protobuf:"varint,5,opt,name=mute" json:"mute,omitempty"`
	// Is the user deafened?
	Deaf *bool `protobuf:"varint,6,opt,name=deaf" json:"deaf,omitempty"`
	// Is the user suppressed?
	Suppress *bool `protobuf:"varint,7,opt,name=suppress" json:"suppress,omitempty"`
	// Is the user a priority speaker?
	PrioritySpeaker *bool `protobuf:"varint,8,opt,name=priority_speaker,json=prioritySpeaker" json:"priority_speaker,omitempty"`
	// Has the user muted him/herself?
	SelfMute *bool `protobuf:"varint,9,opt,name=self_mute,json=selfMute" json:"self_mute,omitempty"`
	// Has the user muted him/herself?
	SelfDeaf *bool `protobuf:"varint,10,opt,name=self_deaf,json=selfDeaf" json:"self_deaf,omitempty"`
	// Is the user recording?
	Recording *bool `protobuf:"varint,11,opt,name=recording" json:"recording,omitempty"`
	// The channel the user is in.
	Channel *Channel `protobuf:"bytes,12,opt,name=channel" json:"channel,omitempty"`
	// How long the user has been connected to the server.
	OnlineSecs *uint32 `protobuf:"varint,13,opt,name=online_secs,json=onlineSecs" json:"online_secs,omitempty"`
	// How long the user has been idle on the server.
	IdleSecs *uint32 `protobuf:"varint,14,opt,name=idle_secs,json=idleSecs" json:"idle_secs,omitempty"`
	// How many bytes per second is the user transmitting to the server.
	BytesPerSec *uint32 `protobuf:"varint,15,opt,name=bytes_per_sec,json=bytesPerSec" json:"bytes_per_sec,omitempty"`
	// The user's client version.
	Version *Version `protobuf:"bytes,16,opt,name=version" json:"version,omitempty"`
	// The user's  plugin context.
	PluginContext []byte `protobuf:"bytes,17,opt,name=plugin_context,json=pluginContext" json:"plugin_context,omitempty"`
	// The user's plugin identity.
	PluginIdentity *string `protobuf:"bytes,18,opt,name=plugin_identity,json=pluginIdentity" json:"plugin_identity,omitempty"`
	// The user's comment.
	Comment *string `protobuf:"bytes,19,opt,name=comment" json:"comment,omitempty"`
	// The user's texture.
	Texture []byte `protobuf:"bytes,20,opt,name=texture" json:"texture,omitempty"`
	// The user's IP address.
	Address []byte `protobuf:"bytes,21,opt,name=address" json:"address,omitempty"`
	// Is the user in TCP-only mode?
	TcpOnly *bool `protobuf:"varint,22,opt,name=tcp_only,json=tcpOnly" json:"tcp_only,omitempty"`
	// The user's UDP ping in milliseconds.
	UdpPingMsecs *float32 `protobuf:"fixed32,23,opt,name=udp_ping_msecs,json=udpPingMsecs" json:"udp_ping_msecs,omitempty"`
	// The user's TCP ping in milliseconds.
	TcpPingMsecs *float32 `protobuf:"fixed32,24,opt,name=tcp_ping_msecs,json=tcpPingMsecs" json:"tcp_ping_msecs,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{10}
}

func (x *User) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *User) GetSession() uint32 {
	if x != nil && x.Session != nil {
		return *x.Session
	}
	return 0
}

func (x *User) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *User) GetMute() bool {
	if x != nil && x.Mute != nil {
		return *x.Mute
	}
	return false
}

func (x *User) GetDeaf() bool {
	if x != nil && x.Deaf != nil {
		return *x.Deaf
	}
	return false
}

func (x *User) GetSuppress() bool {
	if x != nil && x.Suppress != nil {
		return *x.Suppress
	}
	return false
}

func (x *User) GetPrioritySpeaker() bool {
	if x != nil && x.PrioritySpeaker != nil {
		return *x.PrioritySpeaker
	}
	return false
}

func (x *User) GetSelfMute() bool {
	if x != nil && x.SelfMute != nil {
		return *x.SelfMute
	}
	return false
}

func (x *User) GetSelfDeaf() bool {
	if x != nil && x.SelfDeaf != nil {
		return *x.SelfDeaf
	}
	return false
}

func (x *User) GetRecording() bool {
	if x != nil && x.Recording != nil {
		return *x.Recording
	}
	return false
}

func (x *User) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *User) GetOnlineSecs() uint32 {
	if x != nil && x.OnlineSecs != nil {
		return *x.OnlineSecs
	}
	return 0
}

func (x *User) GetIdleSecs() uint32 {
	if x != nil && x.IdleSecs != nil {
		return *x.IdleSecs
	}
	return 0
}

func (x *User) GetBytesPerSec() uint32 {
	if x != nil && x.BytesPerSec != nil {
		return *x.BytesPerSec
	}
	return 0
}

func (x *User) GetVersion() *Version {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *User) GetPluginContext() []byte {
	if x != nil {
		return x.PluginContext
	}
	return nil
}

func (x *User) GetPluginIdentity() string {
	if x != nil && x.PluginIdentity != nil {
		return *x.PluginIdentity
	}
	return ""
}

func (x *User) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *User) GetTexture() []byte {
	if x != nil {
		return x.Texture
	}
	return nil
}

func (x *User) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *User) GetTcpOnly() bool {
	if x != nil && x.TcpOnly != nil {
		return *x.TcpOnly
	}
	return false
}

func (x *User) GetUdpPingMsecs() float32 {
	if x != nil && x.UdpPingMsecs != nil {
		return *x.UdpPingMsecs
	}
	return 0
}

func (x *User) GetTcpPingMsecs() float32 {
	if x != nil && x.TcpPingMsecs != nil {
		return *x.TcpPingMsecs
	}
	return 0
}

type Tree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server which the tree represents.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The current channel.
	Channel *Channel `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	// Channels below the current channel.
	Children []*Tree `protobuf:"bytes,3,rep,name=children" json:"children,omitempty"`
	// The users in the current channel.
	Users []*User `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
}

func (x *Tree) Reset() {
	*x = Tree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree) ProtoMessage() {}

func (x *Tree) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree.ProtoReflect.Descriptor instead.
func (*Tree) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{11}
}

func (x *Tree) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Tree) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *Tree) GetChildren() []*Tree {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Tree) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type Ban struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the ban is applied.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The banned IP address.
	Address []byte `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	// The number of leading bits in the address to which the ban applies.
	Bits *uint32 `protobuf:"varint,3,opt,name=bits" json:"bits,omitempty"`
	// The name of the banned user.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// The certificate hash of the banned user.
	Hash *string `protobuf:"bytes,5,opt,name=hash" json:"hash,omitempty"`
	// The reason for the ban.
	Reason *string `protobuf:"bytes,6,opt,name=reason" json:"reason,omitempty"`
	// The ban start time (in epoch form).
	Start *int64 `protobuf:"varint,7,opt,name=start" json:"start,omitempty"`
	// The ban duration.
	DurationSecs *int64 `protobuf:"varint,8,opt,name=duration_secs,json=durationSecs" json:"duration_secs,omitempty"`
}

func (x *Ban) Reset() {
	*x = Ban{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ban) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ban) ProtoMessage() {}

func (x *Ban) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ban.ProtoReflect.Descriptor instead.
func (*Ban) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{12}
}

func (x *Ban) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Ban) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Ban) GetBits() uint32 {
	if x != nil && x.Bits != nil {
		return *x.Bits
	}
	return 0
}

func (x *Ban) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Ban) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

func (x *Ban) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *Ban) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *Ban) GetDurationSecs() int64 {
	if x != nil && x.DurationSecs != nil {
		return *x.DurationSecs
	}
	return 0
}

type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Does the ACL apply to the current channel?
	ApplyHere *bool `protobuf:"varint,3,opt,name=apply_here,json=applyHere" json:"apply_here,omitempty"`
	// Does the ACL apply to the current channel's sub-channels?
	ApplySubs *bool `protobuf:"varint,4,opt,name=apply_subs,json=applySubs" json:"apply_subs,omitempty"`
	// Was the ACL inherited?
	Inherited *bool `protobuf:"varint,5,opt,name=inherited" json:"inherited,omitempty"`
	// The user to whom the ACL applies.
	User *DatabaseUser `protobuf:"bytes,6,opt,name=user" json:"user,omitempty"`
	// The group to whom the ACL applies.
	Group *ACL_Group `protobuf:"bytes,7,opt,name=group" json:"group,omitempty"`
	// The permissions granted by the ACL (bitmask of ACL.Permission).
	Allow *uint32 `protobuf:"varint,8,opt,name=allow" json:"allow,omitempty"`
	// The permissions denied by the ACL (bitmask of ACL.Permission).
	Deny *uint32 `protobuf:"varint,9,opt,name=deny" json:"deny,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{13}
}

func (x *ACL) GetApplyHere() bool {
	if x != nil && x.ApplyHere != nil {
		return *x.ApplyHere
	}
	return false
}

func (x *ACL) GetApplySubs() bool {
	if x != nil && x.ApplySubs != nil {
		return *x.ApplySubs
	}
	return false
}

func (x *ACL) GetInherited() bool {
	if x != nil && x.Inherited != nil {
		return *x.Inherited
	}
	return false
}

func (x *ACL) GetUser() *DatabaseUser {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ACL) GetGroup() *ACL_Group {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ACL) GetAllow() uint32 {
	if x != nil && x.Allow != nil {
		return *x.Allow
	}
	return 0
}

func (x *ACL) GetDeny() uint32 {
	if x != nil && x.Deny != nil {
		return *x.Deny
	}
	return 0
}

type Authenticator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Authenticator) Reset() {
	*x = Authenticator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator) ProtoMessage() {}

func (x *Authenticator) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator.ProtoReflect.Descriptor instead.
func (*Authenticator) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14}
}

type DatabaseUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the user is registered.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The unique user ID.
	Id *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// The user's name.
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// The user's email address.
	Email *string `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	// The user's comment.
	Comment *string `protobuf:"bytes,5,opt,name=comment" json:"comment,omitempty"`
	// The user's certificate hash.
	Hash *string `protobuf:"bytes,6,opt,name=hash" json:"hash,omitempty"`
	// The user's password (never sent; used only when updating).
	Password *string `protobuf:"bytes,7,opt,name=password" json:"password,omitempty"`
	// When the user was last on the server.
	LastActive *string `protobuf:"bytes,8,opt,name=last_active,json=lastActive" json:"last_active,omitempty"`
	// The user's texture.
	Texture []byte `protobuf:"bytes,9,opt,name=texture" json:"texture,omitempty"`
}

func (x *DatabaseUser) Reset() {
	*x = DatabaseUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseUser) ProtoMessage() {}

func (x *DatabaseUser) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseUser.ProtoReflect.Descriptor instead.
func (*DatabaseUser) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{15}
}

func (x *DatabaseUser) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *DatabaseUser) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *DatabaseUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DatabaseUser) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *DatabaseUser) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *DatabaseUser) GetHash() string {
	if x != nil && x.Hash != nil {
		return *x.Hash
	}
	return ""
}

func (x *DatabaseUser) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *DatabaseUser) GetLastActive() string {
	if x != nil && x.LastActive != nil {
		return *x.LastActive
	}
	return ""
}

func (x *DatabaseUser) GetTexture() []byte {
	if x != nil {
		return x.Texture
	}
	return nil
}

type RedirectWhisperGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the whisper redirection will take place.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The user to whom the redirection will be applied.
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// The source group.
	Source *ACL_Group `protobuf:"bytes,3,opt,name=source" json:"source,omitempty"`
	// The target group.
	Target *ACL_Group `protobuf:"bytes,4,opt,name=target" json:"target,omitempty"`
}

func (x *RedirectWhisperGroup) Reset() {
	*x = RedirectWhisperGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedirectWhisperGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedirectWhisperGroup) ProtoMessage() {}

func (x *RedirectWhisperGroup) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedirectWhisperGroup.ProtoReflect.Descriptor instead.
func (*RedirectWhisperGroup) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{16}
}

func (x *RedirectWhisperGroup) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *RedirectWhisperGroup) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *RedirectWhisperGroup) GetSource() *ACL_Group {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RedirectWhisperGroup) GetTarget() *ACL_Group {
	if x != nil {
		return x.Target
	}
	return nil
}

type Server_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the event happened.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The type of event that happened.
	Type *Server_Event_Type `protobuf:"varint,2,opt,name=type,enum=MurmurRPC.Server_Event_Type" json:"type,omitempty"`
	// The user tied to the event (if applicable).
	User *User `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// The text message tied to the event (if applicable).
	Message *TextMessage `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	// The channel tied to the event (if applicable).
	Channel *Channel `protobuf:"bytes,5,opt,name=channel" json:"channel,omitempty"`
}

func (x *Server_Event) Reset() {
	*x = Server_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Event) ProtoMessage() {}

func (x *Server_Event) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Event.ProtoReflect.Descriptor instead.
func (*Server_Event) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Server_Event) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Server_Event) GetType() Server_Event_Type {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return Server_Event_UserConnected
}

func (x *Server_Event) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Server_Event) GetMessage() *TextMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Server_Event) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type Server_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Server_Query) Reset() {
	*x = Server_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_Query) ProtoMessage() {}

func (x *Server_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_Query.ProtoReflect.Descriptor instead.
func (*Server_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{3, 1}
}

type Server_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The servers.
	Servers []*Server `protobuf:"bytes,1,rep,name=servers" json:"servers,omitempty"`
}

func (x *Server_List) Reset() {
	*x = Server_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Server_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Server_List) ProtoMessage() {}

func (x *Server_List) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Server_List.ProtoReflect.Descriptor instead.
func (*Server_List) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Server_List) GetServers() []*Server {
	if x != nil {
		return x.Servers
	}
	return nil
}

type TextMessage_Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the message originated.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The action to perform for the message.
	Action *TextMessage_Filter_Action `protobuf:"varint,2,opt,name=action,enum=MurmurRPC.TextMessage_Filter_Action" json:"action,omitempty"`
	// The text message.
	Message *TextMessage `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (x *TextMessage_Filter) Reset() {
	*x = TextMessage_Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessage_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage_Filter) ProtoMessage() {}

func (x *TextMessage_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage_Filter.ProtoReflect.Descriptor instead.
func (*TextMessage_Filter) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{6, 0}
}

func (x *TextMessage_Filter) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *TextMessage_Filter) GetAction() TextMessage_Filter_Action {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return TextMessage_Filter_Accept
}

func (x *TextMessage_Filter) GetMessage() *TextMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type Log_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server whose logs will be queried.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The minimum log index to receive.
	Min *uint32 `protobuf:"varint,2,opt,name=min" json:"min,omitempty"`
	// The maximum log index to receive.
	Max *uint32 `protobuf:"varint,3,opt,name=max" json:"max,omitempty"`
}

func (x *Log_Query) Reset() {
	*x = Log_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_Query) ProtoMessage() {}

func (x *Log_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_Query.ProtoReflect.Descriptor instead.
func (*Log_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Log_Query) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Log_Query) GetMin() uint32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *Log_Query) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

type Log_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server where the log entries are from.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The total number of logs entries on the server.
	Total *uint32 `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
	// The minimum log index that was sent.
	Min *uint32 `protobuf:"varint,3,opt,name=min" json:"min,omitempty"`
	// The maximum log index that was sent.
	Max *uint32 `protobuf:"varint,4,opt,name=max" json:"max,omitempty"`
	// The log entries.
	Entries []*Log `protobuf:"bytes,5,rep,name=entries" json:"entries,omitempty"`
}

func (x *Log_List) Reset() {
	*x = Log_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log_List) ProtoMessage() {}

func (x *Log_List) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log_List.ProtoReflect.Descriptor instead.
func (*Log_List) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{7, 1}
}

func (x *Log_List) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Log_List) GetTotal() uint32 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

func (x *Log_List) GetMin() uint32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *Log_List) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *Log_List) GetEntries() []*Log {
	if x != nil {
		return x.Entries
	}
	return nil
}

type Config_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server for which the configuration field is for.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The field key.
	Key *string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	// The field value.
	Value *string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *Config_Field) Reset() {
	*x = Config_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config_Field) ProtoMessage() {}

func (x *Config_Field) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config_Field.ProtoReflect.Descriptor instead.
func (*Config_Field) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{8, 1}
}

func (x *Config_Field) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Config_Field) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *Config_Field) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Channel_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the channels are.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
}

func (x *Channel_Query) Reset() {
	*x = Channel_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel_Query) ProtoMessage() {}

func (x *Channel_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel_Query.ProtoReflect.Descriptor instead.
func (*Channel_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Channel_Query) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type Channel_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the channels are.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The channels.
	Channels []*Channel `protobuf:"bytes,2,rep,name=channels" json:"channels,omitempty"`
}

func (x *Channel_List) Reset() {
	*x = Channel_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel_List) ProtoMessage() {}

func (x *Channel_List) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel_List.ProtoReflect.Descriptor instead.
func (*Channel_List) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{9, 1}
}

func (x *Channel_List) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Channel_List) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type User_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server whose users will be queried.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
}

func (x *User_Query) Reset() {
	*x = User_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Query) ProtoMessage() {}

func (x *User_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Query.ProtoReflect.Descriptor instead.
func (*User_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{10, 0}
}

func (x *User_Query) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type User_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server to which the users are connected.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The users.
	Users []*User `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (x *User_List) Reset() {
	*x = User_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_List) ProtoMessage() {}

func (x *User_List) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_List.ProtoReflect.Descriptor instead.
func (*User_List) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{10, 1}
}

func (x *User_List) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *User_List) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type User_Kick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server to which the user is connected.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The user to kick.
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// The user who performed the kick.
	Actor *User `protobuf:"bytes,3,opt,name=actor" json:"actor,omitempty"`
	// The reason for why the user is being kicked.
	Reason *string `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
}

func (x *User_Kick) Reset() {
	*x = User_Kick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User_Kick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User_Kick) ProtoMessage() {}

func (x *User_Kick) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User_Kick.ProtoReflect.Descriptor instead.
func (*User_Kick) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{10, 2}
}

func (x *User_Kick) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *User_Kick) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *User_Kick) GetActor() *User {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *User_Kick) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type Tree_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server to query.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
}

func (x *Tree_Query) Reset() {
	*x = Tree_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tree_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tree_Query) ProtoMessage() {}

func (x *Tree_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tree_Query.ProtoReflect.Descriptor instead.
func (*Tree_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Tree_Query) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type Ban_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server whose bans to query.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
}

func (x *Ban_Query) Reset() {
	*x = Ban_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ban_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ban_Query) ProtoMessage() {}

func (x *Ban_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ban_Query.ProtoReflect.Descriptor instead.
func (*Ban_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Ban_Query) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type Ban_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server for which the bans apply.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The bans.
	Bans []*Ban `protobuf:"bytes,2,rep,name=bans" json:"bans,omitempty"`
}

func (x *Ban_List) Reset() {
	*x = Ban_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ban_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ban_List) ProtoMessage() {}

func (x *Ban_List) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ban_List.ProtoReflect.Descriptor instead.
func (*Ban_List) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{12, 1}
}

func (x *Ban_List) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Ban_List) GetBans() []*Ban {
	if x != nil {
		return x.Bans
	}
	return nil
}

type ACL_Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ACL group name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Is the group inherited?
	Inherited *bool `protobuf:"varint,2,opt,name=inherited" json:"inherited,omitempty"`
	// Does the group inherit members?
	Inherit *bool `protobuf:"varint,3,opt,name=inherit" json:"inherit,omitempty"`
	// Can this group be inherited by its children?
	Inheritable *bool `protobuf:"varint,4,opt,name=inheritable" json:"inheritable,omitempty"`
	// The users explicitly added by this group.
	UsersAdd []*DatabaseUser `protobuf:"bytes,5,rep,name=users_add,json=usersAdd" json:"users_add,omitempty"`
	// The users explicitly removed by this group.
	UsersRemove []*DatabaseUser `protobuf:"bytes,6,rep,name=users_remove,json=usersRemove" json:"users_remove,omitempty"`
	// All of the users who are part of this group.
	Users []*DatabaseUser `protobuf:"bytes,7,rep,name=users" json:"users,omitempty"`
}

func (x *ACL_Group) Reset() {
	*x = ACL_Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Group) ProtoMessage() {}

func (x *ACL_Group) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Group.ProtoReflect.Descriptor instead.
func (*ACL_Group) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ACL_Group) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ACL_Group) GetInherited() bool {
	if x != nil && x.Inherited != nil {
		return *x.Inherited
	}
	return false
}

func (x *ACL_Group) GetInherit() bool {
	if x != nil && x.Inherit != nil {
		return *x.Inherit
	}
	return false
}

func (x *ACL_Group) GetInheritable() bool {
	if x != nil && x.Inheritable != nil {
		return *x.Inheritable
	}
	return false
}

func (x *ACL_Group) GetUsersAdd() []*DatabaseUser {
	if x != nil {
		return x.UsersAdd
	}
	return nil
}

func (x *ACL_Group) GetUsersRemove() []*DatabaseUser {
	if x != nil {
		return x.UsersRemove
	}
	return nil
}

func (x *ACL_Group) GetUsers() []*DatabaseUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type ACL_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server where the user and channel exist.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The user to query.
	User *User `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	// The channel to query.
	Channel *Channel `protobuf:"bytes,3,opt,name=channel" json:"channel,omitempty"`
}

func (x *ACL_Query) Reset() {
	*x = ACL_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_Query) ProtoMessage() {}

func (x *ACL_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_Query.ProtoReflect.Descriptor instead.
func (*ACL_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ACL_Query) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ACL_Query) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ACL_Query) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ACL_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the ACLs exist.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The channel to which the ACL refers.
	Channel *Channel `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	// The ACLs part of the given channel.
	Acls []*ACL `protobuf:"bytes,3,rep,name=acls" json:"acls,omitempty"`
	// The groups part of the given channel.
	Groups []*ACL_Group `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
	// Should ACLs be inherited from the parent channel.
	Inherit *bool `protobuf:"varint,5,opt,name=inherit" json:"inherit,omitempty"`
}

func (x *ACL_List) Reset() {
	*x = ACL_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_List) ProtoMessage() {}

func (x *ACL_List) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_List.ProtoReflect.Descriptor instead.
func (*ACL_List) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{13, 2}
}

func (x *ACL_List) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ACL_List) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ACL_List) GetAcls() []*ACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *ACL_List) GetGroups() []*ACL_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ACL_List) GetInherit() bool {
	if x != nil && x.Inherit != nil {
		return *x.Inherit
	}
	return false
}

type ACL_TemporaryGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server where the temporary group exists.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The channel to which the temporary user group is added.
	Channel *Channel `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	// The user who is added to the group.
	User *User `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// The name of the temporary group.
	Name *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
}

func (x *ACL_TemporaryGroup) Reset() {
	*x = ACL_TemporaryGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL_TemporaryGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL_TemporaryGroup) ProtoMessage() {}

func (x *ACL_TemporaryGroup) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL_TemporaryGroup.ProtoReflect.Descriptor instead.
func (*ACL_TemporaryGroup) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{13, 3}
}

func (x *ACL_TemporaryGroup) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *ACL_TemporaryGroup) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ACL_TemporaryGroup) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ACL_TemporaryGroup) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type Authenticator_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authenticate *Authenticator_Request_Authenticate `protobuf:"bytes,1,opt,name=authenticate" json:"authenticate,omitempty"`
	Find         *Authenticator_Request_Find         `protobuf:"bytes,2,opt,name=find" json:"find,omitempty"`
	Query        *Authenticator_Request_Query        `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	Register     *Authenticator_Request_Register     `protobuf:"bytes,4,opt,name=register" json:"register,omitempty"`
	Deregister   *Authenticator_Request_Deregister   `protobuf:"bytes,5,opt,name=deregister" json:"deregister,omitempty"`
	Update       *Authenticator_Request_Update       `protobuf:"bytes,6,opt,name=update" json:"update,omitempty"`
}

func (x *Authenticator_Request) Reset() {
	*x = Authenticator_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Request) ProtoMessage() {}

func (x *Authenticator_Request) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Request.ProtoReflect.Descriptor instead.
func (*Authenticator_Request) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 0}
}

func (x *Authenticator_Request) GetAuthenticate() *Authenticator_Request_Authenticate {
	if x != nil {
		return x.Authenticate
	}
	return nil
}

func (x *Authenticator_Request) GetFind() *Authenticator_Request_Find {
	if x != nil {
		return x.Find
	}
	return nil
}

func (x *Authenticator_Request) GetQuery() *Authenticator_Request_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Authenticator_Request) GetRegister() *Authenticator_Request_Register {
	if x != nil {
		return x.Register
	}
	return nil
}

func (x *Authenticator_Request) GetDeregister() *Authenticator_Request_Deregister {
	if x != nil {
		return x.Deregister
	}
	return nil
}

func (x *Authenticator_Request) GetUpdate() *Authenticator_Request_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

type Authenticator_Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Initialize   *Authenticator_Response_Initialize   `protobuf:"bytes,1,opt,name=initialize" json:"initialize,omitempty"`
	Authenticate *Authenticator_Response_Authenticate `protobuf:"bytes,2,opt,name=authenticate" json:"authenticate,omitempty"`
	Find         *Authenticator_Response_Find         `protobuf:"bytes,3,opt,name=find" json:"find,omitempty"`
	Query        *Authenticator_Response_Query        `protobuf:"bytes,4,opt,name=query" json:"query,omitempty"`
	Register     *Authenticator_Response_Register     `protobuf:"bytes,5,opt,name=register" json:"register,omitempty"`
	Deregister   *Authenticator_Response_Deregister   `protobuf:"bytes,6,opt,name=deregister" json:"deregister,omitempty"`
	Update       *Authenticator_Response_Update       `protobuf:"bytes,7,opt,name=update" json:"update,omitempty"`
}

func (x *Authenticator_Response) Reset() {
	*x = Authenticator_Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response) ProtoMessage() {}

func (x *Authenticator_Response) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response.ProtoReflect.Descriptor instead.
func (*Authenticator_Response) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1}
}

func (x *Authenticator_Response) GetInitialize() *Authenticator_Response_Initialize {
	if x != nil {
		return x.Initialize
	}
	return nil
}

func (x *Authenticator_Response) GetAuthenticate() *Authenticator_Response_Authenticate {
	if x != nil {
		return x.Authenticate
	}
	return nil
}

func (x *Authenticator_Response) GetFind() *Authenticator_Response_Find {
	if x != nil {
		return x.Find
	}
	return nil
}

func (x *Authenticator_Response) GetQuery() *Authenticator_Response_Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *Authenticator_Response) GetRegister() *Authenticator_Response_Register {
	if x != nil {
		return x.Register
	}
	return nil
}

func (x *Authenticator_Response) GetDeregister() *Authenticator_Response_Deregister {
	if x != nil {
		return x.Deregister
	}
	return nil
}

func (x *Authenticator_Response) GetUpdate() *Authenticator_Response_Update {
	if x != nil {
		return x.Update
	}
	return nil
}

// An authentication request for a connecting user.
type Authenticator_Request_Authenticate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's name.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The user's password.
	Password *string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// The user's certificate chain in DER format.
	Certificates [][]byte `protobuf:"bytes,3,rep,name=certificates" json:"certificates,omitempty"`
	// The hexadecimal hash of the user's certificate.
	CertificateHash *string `protobuf:"bytes,4,opt,name=certificate_hash,json=certificateHash" json:"certificate_hash,omitempty"`
	// If the user is connecting with a strong certificate.
	StrongCertificate *bool `protobuf:"varint,5,opt,name=strong_certificate,json=strongCertificate" json:"strong_certificate,omitempty"`
}

func (x *Authenticator_Request_Authenticate) Reset() {
	*x = Authenticator_Request_Authenticate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Request_Authenticate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Request_Authenticate) ProtoMessage() {}

func (x *Authenticator_Request_Authenticate) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Request_Authenticate.ProtoReflect.Descriptor instead.
func (*Authenticator_Request_Authenticate) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *Authenticator_Request_Authenticate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Authenticator_Request_Authenticate) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *Authenticator_Request_Authenticate) GetCertificates() [][]byte {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *Authenticator_Request_Authenticate) GetCertificateHash() string {
	if x != nil && x.CertificateHash != nil {
		return *x.CertificateHash
	}
	return ""
}

func (x *Authenticator_Request_Authenticate) GetStrongCertificate() bool {
	if x != nil && x.StrongCertificate != nil {
		return *x.StrongCertificate
	}
	return false
}

// A request for information about a user, given by either the user's ID
// or name.
type Authenticator_Request_Find struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user's ID used for lookup.
	Id *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The user's name used for lookup.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (x *Authenticator_Request_Find) Reset() {
	*x = Authenticator_Request_Find{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Request_Find) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Request_Find) ProtoMessage() {}

func (x *Authenticator_Request_Find) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Request_Find.ProtoReflect.Descriptor instead.
func (*Authenticator_Request_Find) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 0, 1}
}

func (x *Authenticator_Request_Find) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Authenticator_Request_Find) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// A query of all the registered users, optionally filtered by the given
// filter string.
type Authenticator_Request_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user name filter (% is often used as a wildcard)
	Filter *string `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (x *Authenticator_Request_Query) Reset() {
	*x = Authenticator_Request_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Request_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Request_Query) ProtoMessage() {}

func (x *Authenticator_Request_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Request_Query.ProtoReflect.Descriptor instead.
func (*Authenticator_Request_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 0, 2}
}

func (x *Authenticator_Request_Query) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

// A request for a new user registration.
type Authenticator_Request_Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database user to register.
	User *DatabaseUser `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (x *Authenticator_Request_Register) Reset() {
	*x = Authenticator_Request_Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Request_Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Request_Register) ProtoMessage() {}

func (x *Authenticator_Request_Register) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Request_Register.ProtoReflect.Descriptor instead.
func (*Authenticator_Request_Register) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 0, 3}
}

func (x *Authenticator_Request_Register) GetUser() *DatabaseUser {
	if x != nil {
		return x.User
	}
	return nil
}

// A request for deregistering a registered user.
type Authenticator_Request_Deregister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database user to deregister.
	User *DatabaseUser `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (x *Authenticator_Request_Deregister) Reset() {
	*x = Authenticator_Request_Deregister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Request_Deregister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Request_Deregister) ProtoMessage() {}

func (x *Authenticator_Request_Deregister) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Request_Deregister.ProtoReflect.Descriptor instead.
func (*Authenticator_Request_Deregister) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 0, 4}
}

func (x *Authenticator_Request_Deregister) GetUser() *DatabaseUser {
	if x != nil {
		return x.User
	}
	return nil
}

// A request to update a registered user's information. The information
// provided should be merged with existing data.
type Authenticator_Request_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database user to update.
	User *DatabaseUser `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (x *Authenticator_Request_Update) Reset() {
	*x = Authenticator_Request_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Request_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Request_Update) ProtoMessage() {}

func (x *Authenticator_Request_Update) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Request_Update.ProtoReflect.Descriptor instead.
func (*Authenticator_Request_Update) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 0, 5}
}

func (x *Authenticator_Request_Update) GetUser() *DatabaseUser {
	if x != nil {
		return x.User
	}
	return nil
}

// The initialization for the authenticator stream. This message must be
// sent before authentication requests will start streaming.
type Authenticator_Response_Initialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
}

func (x *Authenticator_Response_Initialize) Reset() {
	*x = Authenticator_Response_Initialize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response_Initialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response_Initialize) ProtoMessage() {}

func (x *Authenticator_Response_Initialize) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response_Initialize.ProtoReflect.Descriptor instead.
func (*Authenticator_Response_Initialize) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 0}
}

func (x *Authenticator_Response_Initialize) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

type Authenticator_Response_Authenticate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *Authenticator_Response_Status `protobuf:"varint,1,opt,name=status,enum=MurmurRPC.Authenticator_Response_Status" json:"status,omitempty"`
	// The user's registered ID.
	Id *uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// The corrected user's name;
	Name *string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// Additional ACL groups that the user belongs too.
	Groups []*ACL_Group `protobuf:"bytes,4,rep,name=groups" json:"groups,omitempty"`
}

func (x *Authenticator_Response_Authenticate) Reset() {
	*x = Authenticator_Response_Authenticate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response_Authenticate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response_Authenticate) ProtoMessage() {}

func (x *Authenticator_Response_Authenticate) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response_Authenticate.ProtoReflect.Descriptor instead.
func (*Authenticator_Response_Authenticate) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 1}
}

func (x *Authenticator_Response_Authenticate) GetStatus() Authenticator_Response_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Authenticator_Response_Fallthrough
}

func (x *Authenticator_Response_Authenticate) GetId() uint32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Authenticator_Response_Authenticate) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Authenticator_Response_Authenticate) GetGroups() []*ACL_Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Authenticator_Response_Find struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database user (if found).
	User *DatabaseUser `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (x *Authenticator_Response_Find) Reset() {
	*x = Authenticator_Response_Find{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response_Find) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response_Find) ProtoMessage() {}

func (x *Authenticator_Response_Find) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response_Find.ProtoReflect.Descriptor instead.
func (*Authenticator_Response_Find) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 2}
}

func (x *Authenticator_Response_Find) GetUser() *DatabaseUser {
	if x != nil {
		return x.User
	}
	return nil
}

type Authenticator_Response_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The matched database users.
	Users []*DatabaseUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (x *Authenticator_Response_Query) Reset() {
	*x = Authenticator_Response_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response_Query) ProtoMessage() {}

func (x *Authenticator_Response_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response_Query.ProtoReflect.Descriptor instead.
func (*Authenticator_Response_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 3}
}

func (x *Authenticator_Response_Query) GetUsers() []*DatabaseUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type Authenticator_Response_Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *Authenticator_Response_Status `protobuf:"varint,1,opt,name=status,enum=MurmurRPC.Authenticator_Response_Status" json:"status,omitempty"`
	// The registered database user (must contain the registered user's ID).
	User *DatabaseUser `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
}

func (x *Authenticator_Response_Register) Reset() {
	*x = Authenticator_Response_Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response_Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response_Register) ProtoMessage() {}

func (x *Authenticator_Response_Register) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response_Register.ProtoReflect.Descriptor instead.
func (*Authenticator_Response_Register) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 4}
}

func (x *Authenticator_Response_Register) GetStatus() Authenticator_Response_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Authenticator_Response_Fallthrough
}

func (x *Authenticator_Response_Register) GetUser() *DatabaseUser {
	if x != nil {
		return x.User
	}
	return nil
}

type Authenticator_Response_Deregister struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *Authenticator_Response_Status `protobuf:"varint,1,opt,name=status,enum=MurmurRPC.Authenticator_Response_Status" json:"status,omitempty"`
}

func (x *Authenticator_Response_Deregister) Reset() {
	*x = Authenticator_Response_Deregister{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response_Deregister) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response_Deregister) ProtoMessage() {}

func (x *Authenticator_Response_Deregister) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response_Deregister.ProtoReflect.Descriptor instead.
func (*Authenticator_Response_Deregister) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 5}
}

func (x *Authenticator_Response_Deregister) GetStatus() Authenticator_Response_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Authenticator_Response_Fallthrough
}

type Authenticator_Response_Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of the request.
	Status *Authenticator_Response_Status `protobuf:"varint,1,opt,name=status,enum=MurmurRPC.Authenticator_Response_Status" json:"status,omitempty"`
}

func (x *Authenticator_Response_Update) Reset() {
	*x = Authenticator_Response_Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Authenticator_Response_Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Authenticator_Response_Update) ProtoMessage() {}

func (x *Authenticator_Response_Update) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Authenticator_Response_Update.ProtoReflect.Descriptor instead.
func (*Authenticator_Response_Update) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{14, 1, 6}
}

func (x *Authenticator_Response_Update) GetStatus() Authenticator_Response_Status {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return Authenticator_Response_Fallthrough
}

type DatabaseUser_Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server whose users will be queried.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// A string to filter the users by.
	Filter *string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
}

func (x *DatabaseUser_Query) Reset() {
	*x = DatabaseUser_Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseUser_Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseUser_Query) ProtoMessage() {}

func (x *DatabaseUser_Query) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseUser_Query.ProtoReflect.Descriptor instead.
func (*DatabaseUser_Query) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{15, 0}
}

func (x *DatabaseUser_Query) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *DatabaseUser_Query) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

type DatabaseUser_List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the users are registered.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The users.
	Users []*DatabaseUser `protobuf:"bytes,2,rep,name=users" json:"users,omitempty"`
}

func (x *DatabaseUser_List) Reset() {
	*x = DatabaseUser_List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseUser_List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseUser_List) ProtoMessage() {}

func (x *DatabaseUser_List) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseUser_List.ProtoReflect.Descriptor instead.
func (*DatabaseUser_List) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{15, 1}
}

func (x *DatabaseUser_List) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *DatabaseUser_List) GetUsers() []*DatabaseUser {
	if x != nil {
		return x.Users
	}
	return nil
}

type DatabaseUser_Verify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server on which the user-password pair will be authenticated.
	Server *Server `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	// The user's name.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The user's password.
	Password *string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (x *DatabaseUser_Verify) Reset() {
	*x = DatabaseUser_Verify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_MurmurRPC_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseUser_Verify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseUser_Verify) ProtoMessage() {}

func (x *DatabaseUser_Verify) ProtoReflect() protoreflect.Message {
	mi := &file_MurmurRPC_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseUser_Verify.ProtoReflect.Descriptor instead.
func (*DatabaseUser_Verify) Descriptor() ([]byte, []int) {
	return file_MurmurRPC_proto_rawDescGZIP(), []int{15, 2}
}

func (x *DatabaseUser_Verify) GetServer() *Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *DatabaseUser_Verify) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DatabaseUser_Verify) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

var File_MurmurRPC_proto protoreflect.FileDescriptor

var file_MurmurRPC_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x22, 0x06, 0x0a, 0x04,
	0x56, 0x6f, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x06, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x63, 0x73,
	0x22, 0xa5, 0x04, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x1a, 0x87, 0x03, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x9b, 0x01, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x06, 0x1a, 0x07, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x33, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x70, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0xa8, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x2c, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x04, 0x22, 0xc6, 0x03, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x72,
	0x65, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x74,
	0x72, 0x65, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xcf, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a,
	0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x02, 0x22, 0xd2, 0x02, 0x0a, 0x03, 0x4c,
	0x6f, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a,
	0x56, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0x95, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x28, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x81, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6f,
	0x72, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x32, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x1a, 0x61, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x9f, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x75, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x61, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x61,
	0x66, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x6d, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x66, 0x4d, 0x75, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x64, 0x65,
	0x61, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x66, 0x44, 0x65,
	0x61, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x63, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x69, 0x64, 0x6c, 0x65, 0x53, 0x65, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x12, 0x2c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x63, 0x70, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x74, 0x63, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x64, 0x70, 0x5f, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x75, 0x64, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x65, 0x63, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x63, 0x70, 0x50, 0x69, 0x6e, 0x67, 0x4d, 0x73,
	0x65, 0x63, 0x73, 0x1a, 0x32, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x58, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x1a, 0x95, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x04, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x08, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a,
	0x32, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0xe4, 0x02, 0x0a, 0x03, 0x42, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x62, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x1a,
	0x32, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x1a, 0x55, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x42, 0x61, 0x6e, 0x52, 0x04, 0x62, 0x61, 0x6e, 0x73, 0x22, 0xf3, 0x09, 0x0a, 0x03, 0x41,
	0x43, 0x4c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x48, 0x65, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x75, 0x62, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x65, 0x6e,
	0x79, 0x1a, 0x96, 0x02, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x73, 0x41, 0x64, 0x64, 0x12,
	0x3a, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x85, 0x01, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x1a, 0xcb, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41,
	0x43, 0x4c, 0x52, 0x04, 0x61, 0x63, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x1a, 0xa2, 0x01, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x65, 0x72,
	0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x10, 0x08, 0x12, 0x0c, 0x0a,
	0x07, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x10, 0x80, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x61, 0x66, 0x65, 0x6e, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x6f, 0x76, 0x65, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x40, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x61, 0x6b, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x10, 0x80,
	0x08, 0x12, 0x10, 0x0a, 0x0b, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x10, 0x80, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0x80, 0x04, 0x12, 0x0a, 0x0a, 0x04, 0x4b, 0x69, 0x63, 0x6b, 0x10, 0x80, 0x80,
	0x04, 0x12, 0x09, 0x0a, 0x03, 0x42, 0x61, 0x6e, 0x10, 0x80, 0x80, 0x08, 0x12, 0x0e, 0x0a, 0x08,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x80, 0x80, 0x10, 0x12, 0x12, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x80, 0x80, 0x20,
	0x22, 0xa2, 0x10, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x1a, 0xe1, 0x06, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x66, 0x69, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a,
	0xbc, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x67, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x74, 0x72,
	0x6f, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x1a, 0x2a,
	0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1f, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x37, 0x0a, 0x08, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x1a, 0x39, 0x0a, 0x0a, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a,
	0x35, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0xac, 0x09, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x12, 0x52, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x66, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x66, 0x69, 0x6e,
	0x64, 0x12, 0x3d, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x46, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0xa2, 0x01, 0x0a, 0x0c, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x33, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x2b,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x36, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x1a, 0x79, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2b, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x4e,
	0x0a, 0x0a, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x4a,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x61, 0x6c, 0x6c, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x10, 0x03, 0x22, 0x8b, 0x04, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0x4a, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x60, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x63,
	0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0xc2, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x32, 0x87, 0x16, 0x0a, 0x02, 0x56, 0x31, 0x12,
	0x2f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x0f, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x11, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0f,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a,
	0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0f, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x1a, 0x10,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x30, 0x01, 0x12, 0x32, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x1a, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0b, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x11, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0f, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x11,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x30, 0x01,
	0x12, 0x3d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x12, 0x18, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0f,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12,
	0x40, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x18, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x12, 0x4b, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x3a,
	0x0a, 0x0f, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e,
	0x64, 0x12, 0x16, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x55, 0x0a, 0x11, 0x54, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1d, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1d,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x35, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x4c, 0x6f, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x13, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x4c, 0x6f, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x42, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x17, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x3a, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x1a, 0x11, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x18, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x47, 0x65, 0x74, 0x12, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x64, 0x64, 0x12, 0x12, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x12,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x34, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x12, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x12, 0x2e,
	0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4b, 0x69, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4b, 0x69, 0x63, 0x6b, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72,
	0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x54,
	0x72, 0x65, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x73, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x42, 0x61, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x13, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x42, 0x61,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x42, 0x61, 0x6e, 0x73, 0x53, 0x65,
	0x74, 0x12, 0x13, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x42, 0x61,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x41, 0x43, 0x4c, 0x47, 0x65,
	0x74, 0x12, 0x12, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x13, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x41, 0x43,
	0x4c, 0x53, 0x65, 0x74, 0x12, 0x13, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43,
	0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x42, 0x0a, 0x1a, 0x41, 0x43,
	0x4c, 0x47, 0x65, 0x74, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0e,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x12, 0x46,
	0x0a, 0x14, 0x41, 0x43, 0x4c, 0x41, 0x64, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x41, 0x43, 0x4c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x17, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1d, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x43,
	0x4c, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x12, 0x5e, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75,
	0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x20, 0x2e, 0x4d, 0x75,
	0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x50, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1c, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x12, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52,
	0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72,
	0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x4d, 0x75, 0x72, 0x6d,
	0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50,
	0x43, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x12, 0x4d, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1e, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x1a, 0x17, 0x2e, 0x4d,
	0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64,
	0x12, 0x1f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x12, 0x4e, 0x0a, 0x1a, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x57, 0x68,
	0x69, 0x73, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x12, 0x1f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x57, 0x68, 0x69, 0x73, 0x70, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x0f, 0x2e, 0x4d, 0x75, 0x72, 0x6d, 0x75, 0x72, 0x52, 0x50, 0x43, 0x2e, 0x56, 0x6f,
	0x69, 0x64,
}

var (
	file_MurmurRPC_proto_rawDescOnce sync.Once
	file_MurmurRPC_proto_rawDescData = file_MurmurRPC_proto_rawDesc
)

func file_MurmurRPC_proto_rawDescGZIP() []byte {
	file_MurmurRPC_proto_rawDescOnce.Do(func() {
		file_MurmurRPC_proto_rawDescData = protoimpl.X.CompressGZIP(file_MurmurRPC_proto_rawDescData)
	})
	return file_MurmurRPC_proto_rawDescData
}

var file_MurmurRPC_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_MurmurRPC_proto_msgTypes = make([]protoimpl.MessageInfo, 55)
var file_MurmurRPC_proto_goTypes = []interface{}{
	(Server_Event_Type)(0),                      // 0: MurmurRPC.Server.Event.Type
	(Event_Type)(0),                             // 1: MurmurRPC.Event.Type
	(ContextAction_Context)(0),                  // 2: MurmurRPC.ContextAction.Context
	(TextMessage_Filter_Action)(0),              // 3: MurmurRPC.TextMessage.Filter.Action
	(ACL_Permission)(0),                         // 4: MurmurRPC.ACL.Permission
	(Authenticator_Response_Status)(0),          // 5: MurmurRPC.Authenticator.Response.Status
	(*Void)(nil),                                // 6: MurmurRPC.Void
	(*Version)(nil),                             // 7: MurmurRPC.Version
	(*Uptime)(nil),                              // 8: MurmurRPC.Uptime
	(*Server)(nil),                              // 9: MurmurRPC.Server
	(*Event)(nil),                               // 10: MurmurRPC.Event
	(*ContextAction)(nil),                       // 11: MurmurRPC.ContextAction
	(*TextMessage)(nil),                         // 12: MurmurRPC.TextMessage
	(*Log)(nil),                                 // 13: MurmurRPC.Log
	(*Config)(nil),                              // 14: MurmurRPC.Config
	(*Channel)(nil),                             // 15: MurmurRPC.Channel
	(*User)(nil),                                // 16: MurmurRPC.User
	(*Tree)(nil),                                // 17: MurmurRPC.Tree
	(*Ban)(nil),                                 // 18: MurmurRPC.Ban
	(*ACL)(nil),                                 // 19: MurmurRPC.ACL
	(*Authenticator)(nil),                       // 20: MurmurRPC.Authenticator
	(*DatabaseUser)(nil),                        // 21: MurmurRPC.DatabaseUser
	(*RedirectWhisperGroup)(nil),                // 22: MurmurRPC.RedirectWhisperGroup
	(*Server_Event)(nil),                        // 23: MurmurRPC.Server.Event
	(*Server_Query)(nil),                        // 24: MurmurRPC.Server.Query
	(*Server_List)(nil),                         // 25: MurmurRPC.Server.List
	(*TextMessage_Filter)(nil),                  // 26: MurmurRPC.TextMessage.Filter
	(*Log_Query)(nil),                           // 27: MurmurRPC.Log.Query
	(*Log_List)(nil),                            // 28: MurmurRPC.Log.List
	nil,                                         // 29: MurmurRPC.Config.FieldsEntry
	(*Config_Field)(nil),                        // 30: MurmurRPC.Config.Field
	(*Channel_Query)(nil),                       // 31: MurmurRPC.Channel.Query
	(*Channel_List)(nil),                        // 32: MurmurRPC.Channel.List
	(*User_Query)(nil),                          // 33: MurmurRPC.User.Query
	(*User_List)(nil),                           // 34: MurmurRPC.User.List
	(*User_Kick)(nil),                           // 35: MurmurRPC.User.Kick
	(*Tree_Query)(nil),                          // 36: MurmurRPC.Tree.Query
	(*Ban_Query)(nil),                           // 37: MurmurRPC.Ban.Query
	(*Ban_List)(nil),                            // 38: MurmurRPC.Ban.List
	(*ACL_Group)(nil),                           // 39: MurmurRPC.ACL.Group
	(*ACL_Query)(nil),                           // 40: MurmurRPC.ACL.Query
	(*ACL_List)(nil),                            // 41: MurmurRPC.ACL.List
	(*ACL_TemporaryGroup)(nil),                  // 42: MurmurRPC.ACL.TemporaryGroup
	(*Authenticator_Request)(nil),               // 43: MurmurRPC.Authenticator.Request
	(*Authenticator_Response)(nil),              // 44: MurmurRPC.Authenticator.Response
	(*Authenticator_Request_Authenticate)(nil),  // 45: MurmurRPC.Authenticator.Request.Authenticate
	(*Authenticator_Request_Find)(nil),          // 46: MurmurRPC.Authenticator.Request.Find
	(*Authenticator_Request_Query)(nil),         // 47: MurmurRPC.Authenticator.Request.Query
	(*Authenticator_Request_Register)(nil),      // 48: MurmurRPC.Authenticator.Request.Register
	(*Authenticator_Request_Deregister)(nil),    // 49: MurmurRPC.Authenticator.Request.Deregister
	(*Authenticator_Request_Update)(nil),        // 50: MurmurRPC.Authenticator.Request.Update
	(*Authenticator_Response_Initialize)(nil),   // 51: MurmurRPC.Authenticator.Response.Initialize
	(*Authenticator_Response_Authenticate)(nil), // 52: MurmurRPC.Authenticator.Response.Authenticate
	(*Authenticator_Response_Find)(nil),         // 53: MurmurRPC.Authenticator.Response.Find
	(*Authenticator_Response_Query)(nil),        // 54: MurmurRPC.Authenticator.Response.Query
	(*Authenticator_Response_Register)(nil),     // 55: MurmurRPC.Authenticator.Response.Register
	(*Authenticator_Response_Deregister)(nil),   // 56: MurmurRPC.Authenticator.Response.Deregister
	(*Authenticator_Response_Update)(nil),       // 57: MurmurRPC.Authenticator.Response.Update
	(*DatabaseUser_Query)(nil),                  // 58: MurmurRPC.DatabaseUser.Query
	(*DatabaseUser_List)(nil),                   // 59: MurmurRPC.DatabaseUser.List
	(*DatabaseUser_Verify)(nil),                 // 60: MurmurRPC.DatabaseUser.Verify
}
var file_MurmurRPC_proto_depIdxs = []int32{
	8,   // 0: MurmurRPC.Server.uptime:type_name -> MurmurRPC.Uptime
	9,   // 1: MurmurRPC.Event.server:type_name -> MurmurRPC.Server
	1,   // 2: MurmurRPC.Event.type:type_name -> MurmurRPC.Event.Type
	9,   // 3: MurmurRPC.ContextAction.server:type_name -> MurmurRPC.Server
	16,  // 4: MurmurRPC.ContextAction.actor:type_name -> MurmurRPC.User
	16,  // 5: MurmurRPC.ContextAction.user:type_name -> MurmurRPC.User
	15,  // 6: MurmurRPC.ContextAction.channel:type_name -> MurmurRPC.Channel
	9,   // 7: MurmurRPC.TextMessage.server:type_name -> MurmurRPC.Server
	16,  // 8: MurmurRPC.TextMessage.actor:type_name -> MurmurRPC.User
	16,  // 9: MurmurRPC.TextMessage.users:type_name -> MurmurRPC.User
	15,  // 10: MurmurRPC.TextMessage.channels:type_name -> MurmurRPC.Channel
	15,  // 11: MurmurRPC.TextMessage.trees:type_name -> MurmurRPC.Channel
	9,   // 12: MurmurRPC.Log.server:type_name -> MurmurRPC.Server
	9,   // 13: MurmurRPC.Config.server:type_name -> MurmurRPC.Server
	29,  // 14: MurmurRPC.Config.fields:type_name -> MurmurRPC.Config.FieldsEntry
	9,   // 15: MurmurRPC.Channel.server:type_name -> MurmurRPC.Server
	15,  // 16: MurmurRPC.Channel.parent:type_name -> MurmurRPC.Channel
	15,  // 17: MurmurRPC.Channel.links:type_name -> MurmurRPC.Channel
	9,   // 18: MurmurRPC.User.server:type_name -> MurmurRPC.Server
	15,  // 19: MurmurRPC.User.channel:type_name -> MurmurRPC.Channel
	7,   // 20: MurmurRPC.User.version:type_name -> MurmurRPC.Version
	9,   // 21: MurmurRPC.Tree.server:type_name -> MurmurRPC.Server
	15,  // 22: MurmurRPC.Tree.channel:type_name -> MurmurRPC.Channel
	17,  // 23: MurmurRPC.Tree.children:type_name -> MurmurRPC.Tree
	16,  // 24: MurmurRPC.Tree.users:type_name -> MurmurRPC.User
	9,   // 25: MurmurRPC.Ban.server:type_name -> MurmurRPC.Server
	21,  // 26: MurmurRPC.ACL.user:type_name -> MurmurRPC.DatabaseUser
	39,  // 27: MurmurRPC.ACL.group:type_name -> MurmurRPC.ACL.Group
	9,   // 28: MurmurRPC.DatabaseUser.server:type_name -> MurmurRPC.Server
	9,   // 29: MurmurRPC.RedirectWhisperGroup.server:type_name -> MurmurRPC.Server
	16,  // 30: MurmurRPC.RedirectWhisperGroup.user:type_name -> MurmurRPC.User
	39,  // 31: MurmurRPC.RedirectWhisperGroup.source:type_name -> MurmurRPC.ACL.Group
	39,  // 32: MurmurRPC.RedirectWhisperGroup.target:type_name -> MurmurRPC.ACL.Group
	9,   // 33: MurmurRPC.Server.Event.server:type_name -> MurmurRPC.Server
	0,   // 34: MurmurRPC.Server.Event.type:type_name -> MurmurRPC.Server.Event.Type
	16,  // 35: MurmurRPC.Server.Event.user:type_name -> MurmurRPC.User
	12,  // 36: MurmurRPC.Server.Event.message:type_name -> MurmurRPC.TextMessage
	15,  // 37: MurmurRPC.Server.Event.channel:type_name -> MurmurRPC.Channel
	9,   // 38: MurmurRPC.Server.List.servers:type_name -> MurmurRPC.Server
	9,   // 39: MurmurRPC.TextMessage.Filter.server:type_name -> MurmurRPC.Server
	3,   // 40: MurmurRPC.TextMessage.Filter.action:type_name -> MurmurRPC.TextMessage.Filter.Action
	12,  // 41: MurmurRPC.TextMessage.Filter.message:type_name -> MurmurRPC.TextMessage
	9,   // 42: MurmurRPC.Log.Query.server:type_name -> MurmurRPC.Server
	9,   // 43: MurmurRPC.Log.List.server:type_name -> MurmurRPC.Server
	13,  // 44: MurmurRPC.Log.List.entries:type_name -> MurmurRPC.Log
	9,   // 45: MurmurRPC.Config.Field.server:type_name -> MurmurRPC.Server
	9,   // 46: MurmurRPC.Channel.Query.server:type_name -> MurmurRPC.Server
	9,   // 47: MurmurRPC.Channel.List.server:type_name -> MurmurRPC.Server
	15,  // 48: MurmurRPC.Channel.List.channels:type_name -> MurmurRPC.Channel
	9,   // 49: MurmurRPC.User.Query.server:type_name -> MurmurRPC.Server
	9,   // 50: MurmurRPC.User.List.server:type_name -> MurmurRPC.Server
	16,  // 51: MurmurRPC.User.List.users:type_name -> MurmurRPC.User
	9,   // 52: MurmurRPC.User.Kick.server:type_name -> MurmurRPC.Server
	16,  // 53: MurmurRPC.User.Kick.user:type_name -> MurmurRPC.User
	16,  // 54: MurmurRPC.User.Kick.actor:type_name -> MurmurRPC.User
	9,   // 55: MurmurRPC.Tree.Query.server:type_name -> MurmurRPC.Server
	9,   // 56: MurmurRPC.Ban.Query.server:type_name -> MurmurRPC.Server
	9,   // 57: MurmurRPC.Ban.List.server:type_name -> MurmurRPC.Server
	18,  // 58: MurmurRPC.Ban.List.bans:type_name -> MurmurRPC.Ban
	21,  // 59: MurmurRPC.ACL.Group.users_add:type_name -> MurmurRPC.DatabaseUser
	21,  // 60: MurmurRPC.ACL.Group.users_remove:type_name -> MurmurRPC.DatabaseUser
	21,  // 61: MurmurRPC.ACL.Group.users:type_name -> MurmurRPC.DatabaseUser
	9,   // 62: MurmurRPC.ACL.Query.server:type_name -> MurmurRPC.Server
	16,  // 63: MurmurRPC.ACL.Query.user:type_name -> MurmurRPC.User
	15,  // 64: MurmurRPC.ACL.Query.channel:type_name -> MurmurRPC.Channel
	9,   // 65: MurmurRPC.ACL.List.server:type_name -> MurmurRPC.Server
	15,  // 66: MurmurRPC.ACL.List.channel:type_name -> MurmurRPC.Channel
	19,  // 67: MurmurRPC.ACL.List.acls:type_name -> MurmurRPC.ACL
	39,  // 68: MurmurRPC.ACL.List.groups:type_name -> MurmurRPC.ACL.Group
	9,   // 69: MurmurRPC.ACL.TemporaryGroup.server:type_name -> MurmurRPC.Server
	15,  // 70: MurmurRPC.ACL.TemporaryGroup.channel:type_name -> MurmurRPC.Channel
	16,  // 71: MurmurRPC.ACL.TemporaryGroup.user:type_name -> MurmurRPC.User
	45,  // 72: MurmurRPC.Authenticator.Request.authenticate:type_name -> MurmurRPC.Authenticator.Request.Authenticate
	46,  // 73: MurmurRPC.Authenticator.Request.find:type_name -> MurmurRPC.Authenticator.Request.Find
	47,  // 74: MurmurRPC.Authenticator.Request.query:type_name -> MurmurRPC.Authenticator.Request.Query
	48,  // 75: MurmurRPC.Authenticator.Request.register:type_name -> MurmurRPC.Authenticator.Request.Register
	49,  // 76: MurmurRPC.Authenticator.Request.deregister:type_name -> MurmurRPC.Authenticator.Request.Deregister
	50,  // 77: MurmurRPC.Authenticator.Request.update:type_name -> MurmurRPC.Authenticator.Request.Update
	51,  // 78: MurmurRPC.Authenticator.Response.initialize:type_name -> MurmurRPC.Authenticator.Response.Initialize
	52,  // 79: MurmurRPC.Authenticator.Response.authenticate:type_name -> MurmurRPC.Authenticator.Response.Authenticate
	53,  // 80: MurmurRPC.Authenticator.Response.find:type_name -> MurmurRPC.Authenticator.Response.Find
	54,  // 81: MurmurRPC.Authenticator.Response.query:type_name -> MurmurRPC.Authenticator.Response.Query
	55,  // 82: MurmurRPC.Authenticator.Response.register:type_name -> MurmurRPC.Authenticator.Response.Register
	56,  // 83: MurmurRPC.Authenticator.Response.deregister:type_name -> MurmurRPC.Authenticator.Response.Deregister
	57,  // 84: MurmurRPC.Authenticator.Response.update:type_name -> MurmurRPC.Authenticator.Response.Update
	21,  // 85: MurmurRPC.Authenticator.Request.Register.user:type_name -> MurmurRPC.DatabaseUser
	21,  // 86: MurmurRPC.Authenticator.Request.Deregister.user:type_name -> MurmurRPC.DatabaseUser
	21,  // 87: MurmurRPC.Authenticator.Request.Update.user:type_name -> MurmurRPC.DatabaseUser
	9,   // 88: MurmurRPC.Authenticator.Response.Initialize.server:type_name -> MurmurRPC.Server
	5,   // 89: MurmurRPC.Authenticator.Response.Authenticate.status:type_name -> MurmurRPC.Authenticator.Response.Status
	39,  // 90: MurmurRPC.Authenticator.Response.Authenticate.groups:type_name -> MurmurRPC.ACL.Group
	21,  // 91: MurmurRPC.Authenticator.Response.Find.user:type_name -> MurmurRPC.DatabaseUser
	21,  // 92: MurmurRPC.Authenticator.Response.Query.users:type_name -> MurmurRPC.DatabaseUser
	5,   // 93: MurmurRPC.Authenticator.Response.Register.status:type_name -> MurmurRPC.Authenticator.Response.Status
	21,  // 94: MurmurRPC.Authenticator.Response.Register.user:type_name -> MurmurRPC.DatabaseUser
	5,   // 95: MurmurRPC.Authenticator.Response.Deregister.status:type_name -> MurmurRPC.Authenticator.Response.Status
	5,   // 96: MurmurRPC.Authenticator.Response.Update.status:type_name -> MurmurRPC.Authenticator.Response.Status
	9,   // 97: MurmurRPC.DatabaseUser.Query.server:type_name -> MurmurRPC.Server
	9,   // 98: MurmurRPC.DatabaseUser.List.server:type_name -> MurmurRPC.Server
	21,  // 99: MurmurRPC.DatabaseUser.List.users:type_name -> MurmurRPC.DatabaseUser
	9,   // 100: MurmurRPC.DatabaseUser.Verify.server:type_name -> MurmurRPC.Server
	6,   // 101: MurmurRPC.V1.GetUptime:input_type -> MurmurRPC.Void
	6,   // 102: MurmurRPC.V1.GetVersion:input_type -> MurmurRPC.Void
	6,   // 103: MurmurRPC.V1.Events:input_type -> MurmurRPC.Void
	6,   // 104: MurmurRPC.V1.ServerCreate:input_type -> MurmurRPC.Void
	24,  // 105: MurmurRPC.V1.ServerQuery:input_type -> MurmurRPC.Server.Query
	9,   // 106: MurmurRPC.V1.ServerGet:input_type -> MurmurRPC.Server
	9,   // 107: MurmurRPC.V1.ServerStart:input_type -> MurmurRPC.Server
	9,   // 108: MurmurRPC.V1.ServerStop:input_type -> MurmurRPC.Server
	9,   // 109: MurmurRPC.V1.ServerRemove:input_type -> MurmurRPC.Server
	9,   // 110: MurmurRPC.V1.ServerEvents:input_type -> MurmurRPC.Server
	11,  // 111: MurmurRPC.V1.ContextActionAdd:input_type -> MurmurRPC.ContextAction
	11,  // 112: MurmurRPC.V1.ContextActionRemove:input_type -> MurmurRPC.ContextAction
	11,  // 113: MurmurRPC.V1.ContextActionEvents:input_type -> MurmurRPC.ContextAction
	12,  // 114: MurmurRPC.V1.TextMessageSend:input_type -> MurmurRPC.TextMessage
	26,  // 115: MurmurRPC.V1.TextMessageFilter:input_type -> MurmurRPC.TextMessage.Filter
	27,  // 116: MurmurRPC.V1.LogQuery:input_type -> MurmurRPC.Log.Query
	9,   // 117: MurmurRPC.V1.ConfigGet:input_type -> MurmurRPC.Server
	30,  // 118: MurmurRPC.V1.ConfigGetField:input_type -> MurmurRPC.Config.Field
	30,  // 119: MurmurRPC.V1.ConfigSetField:input_type -> MurmurRPC.Config.Field
	6,   // 120: MurmurRPC.V1.ConfigGetDefault:input_type -> MurmurRPC.Void
	31,  // 121: MurmurRPC.V1.ChannelQuery:input_type -> MurmurRPC.Channel.Query
	15,  // 122: MurmurRPC.V1.ChannelGet:input_type -> MurmurRPC.Channel
	15,  // 123: MurmurRPC.V1.ChannelAdd:input_type -> MurmurRPC.Channel
	15,  // 124: MurmurRPC.V1.ChannelRemove:input_type -> MurmurRPC.Channel
	15,  // 125: MurmurRPC.V1.ChannelUpdate:input_type -> MurmurRPC.Channel
	33,  // 126: MurmurRPC.V1.UserQuery:input_type -> MurmurRPC.User.Query
	16,  // 127: MurmurRPC.V1.UserGet:input_type -> MurmurRPC.User
	16,  // 128: MurmurRPC.V1.UserUpdate:input_type -> MurmurRPC.User
	35,  // 129: MurmurRPC.V1.UserKick:input_type -> MurmurRPC.User.Kick
	36,  // 130: MurmurRPC.V1.TreeQuery:input_type -> MurmurRPC.Tree.Query
	37,  // 131: MurmurRPC.V1.BansGet:input_type -> MurmurRPC.Ban.Query
	38,  // 132: MurmurRPC.V1.BansSet:input_type -> MurmurRPC.Ban.List
	15,  // 133: MurmurRPC.V1.ACLGet:input_type -> MurmurRPC.Channel
	41,  // 134: MurmurRPC.V1.ACLSet:input_type -> MurmurRPC.ACL.List
	40,  // 135: MurmurRPC.V1.ACLGetEffectivePermissions:input_type -> MurmurRPC.ACL.Query
	42,  // 136: MurmurRPC.V1.ACLAddTemporaryGroup:input_type -> MurmurRPC.ACL.TemporaryGroup
	42,  // 137: MurmurRPC.V1.ACLRemoveTemporaryGroup:input_type -> MurmurRPC.ACL.TemporaryGroup
	44,  // 138: MurmurRPC.V1.AuthenticatorStream:input_type -> MurmurRPC.Authenticator.Response
	58,  // 139: MurmurRPC.V1.DatabaseUserQuery:input_type -> MurmurRPC.DatabaseUser.Query
	21,  // 140: MurmurRPC.V1.DatabaseUserGet:input_type -> MurmurRPC.DatabaseUser
	21,  // 141: MurmurRPC.V1.DatabaseUserUpdate:input_type -> MurmurRPC.DatabaseUser
	21,  // 142: MurmurRPC.V1.DatabaseUserRegister:input_type -> MurmurRPC.DatabaseUser
	21,  // 143: MurmurRPC.V1.DatabaseUserDeregister:input_type -> MurmurRPC.DatabaseUser
	60,  // 144: MurmurRPC.V1.DatabaseUserVerify:input_type -> MurmurRPC.DatabaseUser.Verify
	22,  // 145: MurmurRPC.V1.RedirectWhisperGroupAdd:input_type -> MurmurRPC.RedirectWhisperGroup
	22,  // 146: MurmurRPC.V1.RedirectWhisperGroupRemove:input_type -> MurmurRPC.RedirectWhisperGroup
	8,   // 147: MurmurRPC.V1.GetUptime:output_type -> MurmurRPC.Uptime
	7,   // 148: MurmurRPC.V1.GetVersion:output_type -> MurmurRPC.Version
	10,  // 149: MurmurRPC.V1.Events:output_type -> MurmurRPC.Event
	9,   // 150: MurmurRPC.V1.ServerCreate:output_type -> MurmurRPC.Server
	25,  // 151: MurmurRPC.V1.ServerQuery:output_type -> MurmurRPC.Server.List
	9,   // 152: MurmurRPC.V1.ServerGet:output_type -> MurmurRPC.Server
	6,   // 153: MurmurRPC.V1.ServerStart:output_type -> MurmurRPC.Void
	6,   // 154: MurmurRPC.V1.ServerStop:output_type -> MurmurRPC.Void
	6,   // 155: MurmurRPC.V1.ServerRemove:output_type -> MurmurRPC.Void
	23,  // 156: MurmurRPC.V1.ServerEvents:output_type -> MurmurRPC.Server.Event
	6,   // 157: MurmurRPC.V1.ContextActionAdd:output_type -> MurmurRPC.Void
	6,   // 158: MurmurRPC.V1.ContextActionRemove:output_type -> MurmurRPC.Void
	11,  // 159: MurmurRPC.V1.ContextActionEvents:output_type -> MurmurRPC.ContextAction
	6,   // 160: MurmurRPC.V1.TextMessageSend:output_type -> MurmurRPC.Void
	26,  // 161: MurmurRPC.V1.TextMessageFilter:output_type -> MurmurRPC.TextMessage.Filter
	28,  // 162: MurmurRPC.V1.LogQuery:output_type -> MurmurRPC.Log.List
	14,  // 163: MurmurRPC.V1.ConfigGet:output_type -> MurmurRPC.Config
	30,  // 164: MurmurRPC.V1.ConfigGetField:output_type -> MurmurRPC.Config.Field
	6,   // 165: MurmurRPC.V1.ConfigSetField:output_type -> MurmurRPC.Void
	14,  // 166: MurmurRPC.V1.ConfigGetDefault:output_type -> MurmurRPC.Config
	32,  // 167: MurmurRPC.V1.ChannelQuery:output_type -> MurmurRPC.Channel.List
	15,  // 168: MurmurRPC.V1.ChannelGet:output_type -> MurmurRPC.Channel
	15,  // 169: MurmurRPC.V1.ChannelAdd:output_type -> MurmurRPC.Channel
	6,   // 170: MurmurRPC.V1.ChannelRemove:output_type -> MurmurRPC.Void
	15,  // 171: MurmurRPC.V1.ChannelUpdate:output_type -> MurmurRPC.Channel
	34,  // 172: MurmurRPC.V1.UserQuery:output_type -> MurmurRPC.User.List
	16,  // 173: MurmurRPC.V1.UserGet:output_type -> MurmurRPC.User
	16,  // 174: MurmurRPC.V1.UserUpdate:output_type -> MurmurRPC.User
	6,   // 175: MurmurRPC.V1.UserKick:output_type -> MurmurRPC.Void
	17,  // 176: MurmurRPC.V1.TreeQuery:output_type -> MurmurRPC.Tree
	38,  // 177: MurmurRPC.V1.BansGet:output_type -> MurmurRPC.Ban.List
	6,   // 178: MurmurRPC.V1.BansSet:output_type -> MurmurRPC.Void
	41,  // 179: MurmurRPC.V1.ACLGet:output_type -> MurmurRPC.ACL.List
	6,   // 180: MurmurRPC.V1.ACLSet:output_type -> MurmurRPC.Void
	19,  // 181: MurmurRPC.V1.ACLGetEffectivePermissions:output_type -> MurmurRPC.ACL
	6,   // 182: MurmurRPC.V1.ACLAddTemporaryGroup:output_type -> MurmurRPC.Void
	6,   // 183: MurmurRPC.V1.ACLRemoveTemporaryGroup:output_type -> MurmurRPC.Void
	43,  // 184: MurmurRPC.V1.AuthenticatorStream:output_type -> MurmurRPC.Authenticator.Request
	59,  // 185: MurmurRPC.V1.DatabaseUserQuery:output_type -> MurmurRPC.DatabaseUser.List
	21,  // 186: MurmurRPC.V1.DatabaseUserGet:output_type -> MurmurRPC.DatabaseUser
	6,   // 187: MurmurRPC.V1.DatabaseUserUpdate:output_type -> MurmurRPC.Void
	21,  // 188: MurmurRPC.V1.DatabaseUserRegister:output_type -> MurmurRPC.DatabaseUser
	6,   // 189: MurmurRPC.V1.DatabaseUserDeregister:output_type -> MurmurRPC.Void
	21,  // 190: MurmurRPC.V1.DatabaseUserVerify:output_type -> MurmurRPC.DatabaseUser
	6,   // 191: MurmurRPC.V1.RedirectWhisperGroupAdd:output_type -> MurmurRPC.Void
	6,   // 192: MurmurRPC.V1.RedirectWhisperGroupRemove:output_type -> MurmurRPC.Void
	147, // [147:193] is the sub-list for method output_type
	101, // [101:147] is the sub-list for method input_type
	101, // [101:101] is the sub-list for extension type_name
	101, // [101:101] is the sub-list for extension extendee
	0,   // [0:101] is the sub-list for field type_name
}

func init() { file_MurmurRPC_proto_init() }
func file_MurmurRPC_proto_init() {
	if File_MurmurRPC_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_MurmurRPC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uptime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ban); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedirectWhisperGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Server_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessage_Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User_Kick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tree_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ban_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ban_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL_TemporaryGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Request_Authenticate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Request_Find); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Request_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Request_Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Request_Deregister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Request_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response_Initialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response_Authenticate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response_Find); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response_Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response_Deregister); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Authenticator_Response_Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseUser_Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseUser_List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_MurmurRPC_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseUser_Verify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_MurmurRPC_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   55,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_MurmurRPC_proto_goTypes,
		DependencyIndexes: file_MurmurRPC_proto_depIdxs,
		EnumInfos:         file_MurmurRPC_proto_enumTypes,
		MessageInfos:      file_MurmurRPC_proto_msgTypes,
	}.Build()
	File_MurmurRPC_proto = out.File
	file_MurmurRPC_proto_rawDesc = nil
	file_MurmurRPC_proto_goTypes = nil
	file_MurmurRPC_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// V1Client is the client API for V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type V1Client interface {
	// GetUptime returns murmur's uptime.
	GetUptime(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Uptime, error)
	// GetVersion returns murmur's version.
	GetVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error)
	// Events returns a stream of murmur events.
	Events(ctx context.Context, in *Void, opts ...grpc.CallOption) (V1_EventsClient, error)
	// ServerCreate creates a new virtual server. The returned server object
	// contains the newly created server's ID.
	ServerCreate(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Server, error)
	// ServerQuery returns a list of servers that match the given query.
	ServerQuery(ctx context.Context, in *Server_Query, opts ...grpc.CallOption) (*Server_List, error)
	// ServerGet returns information about the given server.
	ServerGet(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Server, error)
	// ServerStart starts the given stopped server.
	ServerStart(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Void, error)
	// ServerStop stops the given virtual server.
	ServerStop(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Void, error)
	// ServerRemove removes the given virtual server and its configuration.
	ServerRemove(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Void, error)
	// ServerEvents returns a stream of events that happen on the given server.
	ServerEvents(ctx context.Context, in *Server, opts ...grpc.CallOption) (V1_ServerEventsClient, error)
	// ContextActionAdd adds a context action to the given user's client. The
	// following ContextAction fields must be set:
	//   context, action, text, and user.
	//
	// Added context actions are valid until:
	//  - The context action is removed with ContextActionRemove, or
	//  - The user disconnects from the server, or
	//  - The server stops.
	ContextActionAdd(ctx context.Context, in *ContextAction, opts ...grpc.CallOption) (*Void, error)
	// ContextActionRemove removes a context action from the given user's client.
	// The following ContextAction must be set:
	//   action
	// If no user is given, the context action is removed from all users.
	ContextActionRemove(ctx context.Context, in *ContextAction, opts ...grpc.CallOption) (*Void, error)
	// ContextActionEvents returns a stream of context action events that are
	// triggered by users.
	ContextActionEvents(ctx context.Context, in *ContextAction, opts ...grpc.CallOption) (V1_ContextActionEventsClient, error)
	// TextMessageSend sends the given TextMessage to the server.
	//
	// If no users, channels, or trees are added to the TextMessage, the message
	// will be broadcast the entire server. Otherwise, the message will be
	// targeted to the specified users, channels, and trees.
	TextMessageSend(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*Void, error)
	// TextMessageFilter filters text messages for a given server.
	//
	// When a filter stream is active, text messages sent from users to the
	// server are sent over the stream. The RPC client then sends a message back
	// on the same stream, containing an action: whether the message should be
	// accepted, rejected, or dropped.
	//
	// To activate the filter stream, an initial TextMessage.Filter message must
	// be sent that contains the server on which the filter will be active.
	TextMessageFilter(ctx context.Context, opts ...grpc.CallOption) (V1_TextMessageFilterClient, error)
	// LogQuery returns a list of log entries from the given server.
	//
	// To get the total number of log entries, omit min and/or max from the
	// query.
	LogQuery(ctx context.Context, in *Log_Query, opts ...grpc.CallOption) (*Log_List, error)
	// ConfigGet returns the explicitly set configuration for the given server.
	ConfigGet(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Config, error)
	// ConfigGetField returns the configuration value for the given key.
	ConfigGetField(ctx context.Context, in *Config_Field, opts ...grpc.CallOption) (*Config_Field, error)
	// ConfigSetField sets the configuration value to the given value.
	ConfigSetField(ctx context.Context, in *Config_Field, opts ...grpc.CallOption) (*Void, error)
	// ConfigGetDefault returns the default server configuration.
	ConfigGetDefault(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Config, error)
	// ChannelQuery returns a list of channels that match the given query.
	ChannelQuery(ctx context.Context, in *Channel_Query, opts ...grpc.CallOption) (*Channel_List, error)
	// ChannelGet returns the channel with the given ID.
	ChannelGet(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error)
	// ChannelAdd adds the channel to the given server. The parent and name of
	// the channel must be set.
	ChannelAdd(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error)
	// ChannelRemove removes the given channel from the server.
	ChannelRemove(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Void, error)
	// ChannelUpdate updates the given channel's attributes. Only the fields that
	// are set will be updated.
	ChannelUpdate(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error)
	// UserQuery returns a list of connected users who match the given query.
	UserQuery(ctx context.Context, in *User_Query, opts ...grpc.CallOption) (*User_List, error)
	// UserGet returns information on the connected user, given by the user's
	// session or name.
	UserGet(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// UserUpdate changes the given user's state. Only the following fields can
	// be changed:
	//   name, mute, deaf, suppress, priority_speaker, channel, comment.
	UserUpdate(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// UserKick kicks the user from the server.
	UserKick(ctx context.Context, in *User_Kick, opts ...grpc.CallOption) (*Void, error)
	// TreeQuery returns a representation of the given server's channel/user
	// tree.
	TreeQuery(ctx context.Context, in *Tree_Query, opts ...grpc.CallOption) (*Tree, error)
	// BansGet returns a list of bans for the given server.
	BansGet(ctx context.Context, in *Ban_Query, opts ...grpc.CallOption) (*Ban_List, error)
	// BansSet replaces the server's ban list with the given list.
	BansSet(ctx context.Context, in *Ban_List, opts ...grpc.CallOption) (*Void, error)
	// ACLGet returns the ACL for the given channel.
	ACLGet(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ACL_List, error)
	// ACLSet overrides the ACL of the given channel to what is provided.
	ACLSet(ctx context.Context, in *ACL_List, opts ...grpc.CallOption) (*Void, error)
	// ACLGetEffectivePermissions returns the effective permissions for the given
	// user in the given channel.
	ACLGetEffectivePermissions(ctx context.Context, in *ACL_Query, opts ...grpc.CallOption) (*ACL, error)
	// ACLAddTemporaryGroup adds a user to a temporary group.
	ACLAddTemporaryGroup(ctx context.Context, in *ACL_TemporaryGroup, opts ...grpc.CallOption) (*Void, error)
	// ACLRemoveTemporaryGroup removes a user from a temporary group.
	ACLRemoveTemporaryGroup(ctx context.Context, in *ACL_TemporaryGroup, opts ...grpc.CallOption) (*Void, error)
	// AuthenticatorStream opens an authentication stream to the server.
	//
	// There can only be one RPC client with an open Stream. If a new
	// authenticator connects, the open connected will be closed.
	AuthenticatorStream(ctx context.Context, opts ...grpc.CallOption) (V1_AuthenticatorStreamClient, error)
	// DatabaseUserQuery returns a list of registered users who match given
	// query.
	DatabaseUserQuery(ctx context.Context, in *DatabaseUser_Query, opts ...grpc.CallOption) (*DatabaseUser_List, error)
	// DatabaseUserGet returns the database user with the given ID.
	DatabaseUserGet(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*DatabaseUser, error)
	// DatabaseUserUpdate updates the given database user.
	DatabaseUserUpdate(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*Void, error)
	// DatabaseUserRegister registers a user with the given information on the
	// server. The returned DatabaseUser will contain the newly registered user's
	// ID.
	DatabaseUserRegister(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*DatabaseUser, error)
	// DatabaseUserDeregister deregisters the given user.
	DatabaseUserDeregister(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*Void, error)
	// DatabaseUserVerify verifies the that the given user-password pair is
	// correct.
	DatabaseUserVerify(ctx context.Context, in *DatabaseUser_Verify, opts ...grpc.CallOption) (*DatabaseUser, error)
	// AddRedirectWhisperGroup add a whisper targets redirection for the given
	// user. Whenever a user whispers to group "source", the whisper will be
	// redirected to group "target".
	RedirectWhisperGroupAdd(ctx context.Context, in *RedirectWhisperGroup, opts ...grpc.CallOption) (*Void, error)
	// RemoveRedirectWhisperGroup removes a whisper target redirection for
	// the the given user.
	RedirectWhisperGroupRemove(ctx context.Context, in *RedirectWhisperGroup, opts ...grpc.CallOption) (*Void, error)
}

type v1Client struct {
	cc grpc.ClientConnInterface
}

func NewV1Client(cc grpc.ClientConnInterface) V1Client {
	return &v1Client{cc}
}

func (c *v1Client) GetUptime(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Uptime, error) {
	out := new(Uptime)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/GetUptime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) GetVersion(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Version, error) {
	out := new(Version)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) Events(ctx context.Context, in *Void, opts ...grpc.CallOption) (V1_EventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_V1_serviceDesc.Streams[0], "/MurmurRPC.V1/Events", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1EventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_EventsClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type v1EventsClient struct {
	grpc.ClientStream
}

func (x *v1EventsClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v1Client) ServerCreate(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ServerCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ServerQuery(ctx context.Context, in *Server_Query, opts ...grpc.CallOption) (*Server_List, error) {
	out := new(Server_List)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ServerQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ServerGet(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Server, error) {
	out := new(Server)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ServerGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ServerStart(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ServerStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ServerStop(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ServerStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ServerRemove(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ServerRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ServerEvents(ctx context.Context, in *Server, opts ...grpc.CallOption) (V1_ServerEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_V1_serviceDesc.Streams[1], "/MurmurRPC.V1/ServerEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1ServerEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_ServerEventsClient interface {
	Recv() (*Server_Event, error)
	grpc.ClientStream
}

type v1ServerEventsClient struct {
	grpc.ClientStream
}

func (x *v1ServerEventsClient) Recv() (*Server_Event, error) {
	m := new(Server_Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v1Client) ContextActionAdd(ctx context.Context, in *ContextAction, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ContextActionAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ContextActionRemove(ctx context.Context, in *ContextAction, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ContextActionRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ContextActionEvents(ctx context.Context, in *ContextAction, opts ...grpc.CallOption) (V1_ContextActionEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_V1_serviceDesc.Streams[2], "/MurmurRPC.V1/ContextActionEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1ContextActionEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type V1_ContextActionEventsClient interface {
	Recv() (*ContextAction, error)
	grpc.ClientStream
}

type v1ContextActionEventsClient struct {
	grpc.ClientStream
}

func (x *v1ContextActionEventsClient) Recv() (*ContextAction, error) {
	m := new(ContextAction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v1Client) TextMessageSend(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/TextMessageSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) TextMessageFilter(ctx context.Context, opts ...grpc.CallOption) (V1_TextMessageFilterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_V1_serviceDesc.Streams[3], "/MurmurRPC.V1/TextMessageFilter", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1TextMessageFilterClient{stream}
	return x, nil
}

type V1_TextMessageFilterClient interface {
	Send(*TextMessage_Filter) error
	Recv() (*TextMessage_Filter, error)
	grpc.ClientStream
}

type v1TextMessageFilterClient struct {
	grpc.ClientStream
}

func (x *v1TextMessageFilterClient) Send(m *TextMessage_Filter) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v1TextMessageFilterClient) Recv() (*TextMessage_Filter, error) {
	m := new(TextMessage_Filter)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v1Client) LogQuery(ctx context.Context, in *Log_Query, opts ...grpc.CallOption) (*Log_List, error) {
	out := new(Log_List)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/LogQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ConfigGet(ctx context.Context, in *Server, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ConfigGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ConfigGetField(ctx context.Context, in *Config_Field, opts ...grpc.CallOption) (*Config_Field, error) {
	out := new(Config_Field)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ConfigGetField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ConfigSetField(ctx context.Context, in *Config_Field, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ConfigSetField", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ConfigGetDefault(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Config, error) {
	out := new(Config)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ConfigGetDefault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ChannelQuery(ctx context.Context, in *Channel_Query, opts ...grpc.CallOption) (*Channel_List, error) {
	out := new(Channel_List)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ChannelQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ChannelGet(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ChannelGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ChannelAdd(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ChannelAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ChannelRemove(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ChannelRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ChannelUpdate(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*Channel, error) {
	out := new(Channel)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ChannelUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) UserQuery(ctx context.Context, in *User_Query, opts ...grpc.CallOption) (*User_List, error) {
	out := new(User_List)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/UserQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) UserGet(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/UserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) UserUpdate(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) UserKick(ctx context.Context, in *User_Kick, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/UserKick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) TreeQuery(ctx context.Context, in *Tree_Query, opts ...grpc.CallOption) (*Tree, error) {
	out := new(Tree)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/TreeQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) BansGet(ctx context.Context, in *Ban_Query, opts ...grpc.CallOption) (*Ban_List, error) {
	out := new(Ban_List)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/BansGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) BansSet(ctx context.Context, in *Ban_List, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/BansSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ACLGet(ctx context.Context, in *Channel, opts ...grpc.CallOption) (*ACL_List, error) {
	out := new(ACL_List)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ACLGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ACLSet(ctx context.Context, in *ACL_List, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ACLSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ACLGetEffectivePermissions(ctx context.Context, in *ACL_Query, opts ...grpc.CallOption) (*ACL, error) {
	out := new(ACL)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ACLGetEffectivePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ACLAddTemporaryGroup(ctx context.Context, in *ACL_TemporaryGroup, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ACLAddTemporaryGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) ACLRemoveTemporaryGroup(ctx context.Context, in *ACL_TemporaryGroup, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/ACLRemoveTemporaryGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) AuthenticatorStream(ctx context.Context, opts ...grpc.CallOption) (V1_AuthenticatorStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_V1_serviceDesc.Streams[4], "/MurmurRPC.V1/AuthenticatorStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &v1AuthenticatorStreamClient{stream}
	return x, nil
}

type V1_AuthenticatorStreamClient interface {
	Send(*Authenticator_Response) error
	Recv() (*Authenticator_Request, error)
	grpc.ClientStream
}

type v1AuthenticatorStreamClient struct {
	grpc.ClientStream
}

func (x *v1AuthenticatorStreamClient) Send(m *Authenticator_Response) error {
	return x.ClientStream.SendMsg(m)
}

func (x *v1AuthenticatorStreamClient) Recv() (*Authenticator_Request, error) {
	m := new(Authenticator_Request)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *v1Client) DatabaseUserQuery(ctx context.Context, in *DatabaseUser_Query, opts ...grpc.CallOption) (*DatabaseUser_List, error) {
	out := new(DatabaseUser_List)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/DatabaseUserQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) DatabaseUserGet(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*DatabaseUser, error) {
	out := new(DatabaseUser)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/DatabaseUserGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) DatabaseUserUpdate(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/DatabaseUserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) DatabaseUserRegister(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*DatabaseUser, error) {
	out := new(DatabaseUser)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/DatabaseUserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) DatabaseUserDeregister(ctx context.Context, in *DatabaseUser, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/DatabaseUserDeregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) DatabaseUserVerify(ctx context.Context, in *DatabaseUser_Verify, opts ...grpc.CallOption) (*DatabaseUser, error) {
	out := new(DatabaseUser)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/DatabaseUserVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) RedirectWhisperGroupAdd(ctx context.Context, in *RedirectWhisperGroup, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/RedirectWhisperGroupAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *v1Client) RedirectWhisperGroupRemove(ctx context.Context, in *RedirectWhisperGroup, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/MurmurRPC.V1/RedirectWhisperGroupRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// V1Server is the server API for V1 service.
type V1Server interface {
	// GetUptime returns murmur's uptime.
	GetUptime(context.Context, *Void) (*Uptime, error)
	// GetVersion returns murmur's version.
	GetVersion(context.Context, *Void) (*Version, error)
	// Events returns a stream of murmur events.
	Events(*Void, V1_EventsServer) error
	// ServerCreate creates a new virtual server. The returned server object
	// contains the newly created server's ID.
	ServerCreate(context.Context, *Void) (*Server, error)
	// ServerQuery returns a list of servers that match the given query.
	ServerQuery(context.Context, *Server_Query) (*Server_List, error)
	// ServerGet returns information about the given server.
	ServerGet(context.Context, *Server) (*Server, error)
	// ServerStart starts the given stopped server.
	ServerStart(context.Context, *Server) (*Void, error)
	// ServerStop stops the given virtual server.
	ServerStop(context.Context, *Server) (*Void, error)
	// ServerRemove removes the given virtual server and its configuration.
	ServerRemove(context.Context, *Server) (*Void, error)
	// ServerEvents returns a stream of events that happen on the given server.
	ServerEvents(*Server, V1_ServerEventsServer) error
	// ContextActionAdd adds a context action to the given user's client. The
	// following ContextAction fields must be set:
	//   context, action, text, and user.
	//
	// Added context actions are valid until:
	//  - The context action is removed with ContextActionRemove, or
	//  - The user disconnects from the server, or
	//  - The server stops.
	ContextActionAdd(context.Context, *ContextAction) (*Void, error)
	// ContextActionRemove removes a context action from the given user's client.
	// The following ContextAction must be set:
	//   action
	// If no user is given, the context action is removed from all users.
	ContextActionRemove(context.Context, *ContextAction) (*Void, error)
	// ContextActionEvents returns a stream of context action events that are
	// triggered by users.
	ContextActionEvents(*ContextAction, V1_ContextActionEventsServer) error
	// TextMessageSend sends the given TextMessage to the server.
	//
	// If no users, channels, or trees are added to the TextMessage, the message
	// will be broadcast the entire server. Otherwise, the message will be
	// targeted to the specified users, channels, and trees.
	TextMessageSend(context.Context, *TextMessage) (*Void, error)
	// TextMessageFilter filters text messages for a given server.
	//
	// When a filter stream is active, text messages sent from users to the
	// server are sent over the stream. The RPC client then sends a message back
	// on the same stream, containing an action: whether the message should be
	// accepted, rejected, or dropped.
	//
	// To activate the filter stream, an initial TextMessage.Filter message must
	// be sent that contains the server on which the filter will be active.
	TextMessageFilter(V1_TextMessageFilterServer) error
	// LogQuery returns a list of log entries from the given server.
	//
	// To get the total number of log entries, omit min and/or max from the
	// query.
	LogQuery(context.Context, *Log_Query) (*Log_List, error)
	// ConfigGet returns the explicitly set configuration for the given server.
	ConfigGet(context.Context, *Server) (*Config, error)
	// ConfigGetField returns the configuration value for the given key.
	ConfigGetField(context.Context, *Config_Field) (*Config_Field, error)
	// ConfigSetField sets the configuration value to the given value.
	ConfigSetField(context.Context, *Config_Field) (*Void, error)
	// ConfigGetDefault returns the default server configuration.
	ConfigGetDefault(context.Context, *Void) (*Config, error)
	// ChannelQuery returns a list of channels that match the given query.
	ChannelQuery(context.Context, *Channel_Query) (*Channel_List, error)
	// ChannelGet returns the channel with the given ID.
	ChannelGet(context.Context, *Channel) (*Channel, error)
	// ChannelAdd adds the channel to the given server. The parent and name of
	// the channel must be set.
	ChannelAdd(context.Context, *Channel) (*Channel, error)
	// ChannelRemove removes the given channel from the server.
	ChannelRemove(context.Context, *Channel) (*Void, error)
	// ChannelUpdate updates the given channel's attributes. Only the fields that
	// are set will be updated.
	ChannelUpdate(context.Context, *Channel) (*Channel, error)
	// UserQuery returns a list of connected users who match the given query.
	UserQuery(context.Context, *User_Query) (*User_List, error)
	// UserGet returns information on the connected user, given by the user's
	// session or name.
	UserGet(context.Context, *User) (*User, error)
	// UserUpdate changes the given user's state. Only the following fields can
	// be changed:
	//   name, mute, deaf, suppress, priority_speaker, channel, comment.
	UserUpdate(context.Context, *User) (*User, error)
	// UserKick kicks the user from the server.
	UserKick(context.Context, *User_Kick) (*Void, error)
	// TreeQuery returns a representation of the given server's channel/user
	// tree.
	TreeQuery(context.Context, *Tree_Query) (*Tree, error)
	// BansGet returns a list of bans for the given server.
	BansGet(context.Context, *Ban_Query) (*Ban_List, error)
	// BansSet replaces the server's ban list with the given list.
	BansSet(context.Context, *Ban_List) (*Void, error)
	// ACLGet returns the ACL for the given channel.
	ACLGet(context.Context, *Channel) (*ACL_List, error)
	// ACLSet overrides the ACL of the given channel to what is provided.
	ACLSet(context.Context, *ACL_List) (*Void, error)
	// ACLGetEffectivePermissions returns the effective permissions for the given
	// user in the given channel.
	ACLGetEffectivePermissions(context.Context, *ACL_Query) (*ACL, error)
	// ACLAddTemporaryGroup adds a user to a temporary group.
	ACLAddTemporaryGroup(context.Context, *ACL_TemporaryGroup) (*Void, error)
	// ACLRemoveTemporaryGroup removes a user from a temporary group.
	ACLRemoveTemporaryGroup(context.Context, *ACL_TemporaryGroup) (*Void, error)
	// AuthenticatorStream opens an authentication stream to the server.
	//
	// There can only be one RPC client with an open Stream. If a new
	// authenticator connects, the open connected will be closed.
	AuthenticatorStream(V1_AuthenticatorStreamServer) error
	// DatabaseUserQuery returns a list of registered users who match given
	// query.
	DatabaseUserQuery(context.Context, *DatabaseUser_Query) (*DatabaseUser_List, error)
	// DatabaseUserGet returns the database user with the given ID.
	DatabaseUserGet(context.Context, *DatabaseUser) (*DatabaseUser, error)
	// DatabaseUserUpdate updates the given database user.
	DatabaseUserUpdate(context.Context, *DatabaseUser) (*Void, error)
	// DatabaseUserRegister registers a user with the given information on the
	// server. The returned DatabaseUser will contain the newly registered user's
	// ID.
	DatabaseUserRegister(context.Context, *DatabaseUser) (*DatabaseUser, error)
	// DatabaseUserDeregister deregisters the given user.
	DatabaseUserDeregister(context.Context, *DatabaseUser) (*Void, error)
	// DatabaseUserVerify verifies the that the given user-password pair is
	// correct.
	DatabaseUserVerify(context.Context, *DatabaseUser_Verify) (*DatabaseUser, error)
	// AddRedirectWhisperGroup add a whisper targets redirection for the given
	// user. Whenever a user whispers to group "source", the whisper will be
	// redirected to group "target".
	RedirectWhisperGroupAdd(context.Context, *RedirectWhisperGroup) (*Void, error)
	// RemoveRedirectWhisperGroup removes a whisper target redirection for
	// the the given user.
	RedirectWhisperGroupRemove(context.Context, *RedirectWhisperGroup) (*Void, error)
}

// UnimplementedV1Server can be embedded to have forward compatible implementations.
type UnimplementedV1Server struct {
}

func (*UnimplementedV1Server) GetUptime(context.Context, *Void) (*Uptime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUptime not implemented")
}
func (*UnimplementedV1Server) GetVersion(context.Context, *Void) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (*UnimplementedV1Server) Events(*Void, V1_EventsServer) error {
	return status.Errorf(codes.Unimplemented, "method Events not implemented")
}
func (*UnimplementedV1Server) ServerCreate(context.Context, *Void) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerCreate not implemented")
}
func (*UnimplementedV1Server) ServerQuery(context.Context, *Server_Query) (*Server_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerQuery not implemented")
}
func (*UnimplementedV1Server) ServerGet(context.Context, *Server) (*Server, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerGet not implemented")
}
func (*UnimplementedV1Server) ServerStart(context.Context, *Server) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerStart not implemented")
}
func (*UnimplementedV1Server) ServerStop(context.Context, *Server) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerStop not implemented")
}
func (*UnimplementedV1Server) ServerRemove(context.Context, *Server) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServerRemove not implemented")
}
func (*UnimplementedV1Server) ServerEvents(*Server, V1_ServerEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerEvents not implemented")
}
func (*UnimplementedV1Server) ContextActionAdd(context.Context, *ContextAction) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextActionAdd not implemented")
}
func (*UnimplementedV1Server) ContextActionRemove(context.Context, *ContextAction) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContextActionRemove not implemented")
}
func (*UnimplementedV1Server) ContextActionEvents(*ContextAction, V1_ContextActionEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ContextActionEvents not implemented")
}
func (*UnimplementedV1Server) TextMessageSend(context.Context, *TextMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextMessageSend not implemented")
}
func (*UnimplementedV1Server) TextMessageFilter(V1_TextMessageFilterServer) error {
	return status.Errorf(codes.Unimplemented, "method TextMessageFilter not implemented")
}
func (*UnimplementedV1Server) LogQuery(context.Context, *Log_Query) (*Log_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogQuery not implemented")
}
func (*UnimplementedV1Server) ConfigGet(context.Context, *Server) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGet not implemented")
}
func (*UnimplementedV1Server) ConfigGetField(context.Context, *Config_Field) (*Config_Field, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetField not implemented")
}
func (*UnimplementedV1Server) ConfigSetField(context.Context, *Config_Field) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSetField not implemented")
}
func (*UnimplementedV1Server) ConfigGetDefault(context.Context, *Void) (*Config, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetDefault not implemented")
}
func (*UnimplementedV1Server) ChannelQuery(context.Context, *Channel_Query) (*Channel_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelQuery not implemented")
}
func (*UnimplementedV1Server) ChannelGet(context.Context, *Channel) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelGet not implemented")
}
func (*UnimplementedV1Server) ChannelAdd(context.Context, *Channel) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelAdd not implemented")
}
func (*UnimplementedV1Server) ChannelRemove(context.Context, *Channel) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelRemove not implemented")
}
func (*UnimplementedV1Server) ChannelUpdate(context.Context, *Channel) (*Channel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpdate not implemented")
}
func (*UnimplementedV1Server) UserQuery(context.Context, *User_Query) (*User_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQuery not implemented")
}
func (*UnimplementedV1Server) UserGet(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGet not implemented")
}
func (*UnimplementedV1Server) UserUpdate(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdate not implemented")
}
func (*UnimplementedV1Server) UserKick(context.Context, *User_Kick) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserKick not implemented")
}
func (*UnimplementedV1Server) TreeQuery(context.Context, *Tree_Query) (*Tree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TreeQuery not implemented")
}
func (*UnimplementedV1Server) BansGet(context.Context, *Ban_Query) (*Ban_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BansGet not implemented")
}
func (*UnimplementedV1Server) BansSet(context.Context, *Ban_List) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BansSet not implemented")
}
func (*UnimplementedV1Server) ACLGet(context.Context, *Channel) (*ACL_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACLGet not implemented")
}
func (*UnimplementedV1Server) ACLSet(context.Context, *ACL_List) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACLSet not implemented")
}
func (*UnimplementedV1Server) ACLGetEffectivePermissions(context.Context, *ACL_Query) (*ACL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACLGetEffectivePermissions not implemented")
}
func (*UnimplementedV1Server) ACLAddTemporaryGroup(context.Context, *ACL_TemporaryGroup) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACLAddTemporaryGroup not implemented")
}
func (*UnimplementedV1Server) ACLRemoveTemporaryGroup(context.Context, *ACL_TemporaryGroup) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ACLRemoveTemporaryGroup not implemented")
}
func (*UnimplementedV1Server) AuthenticatorStream(V1_AuthenticatorStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AuthenticatorStream not implemented")
}
func (*UnimplementedV1Server) DatabaseUserQuery(context.Context, *DatabaseUser_Query) (*DatabaseUser_List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUserQuery not implemented")
}
func (*UnimplementedV1Server) DatabaseUserGet(context.Context, *DatabaseUser) (*DatabaseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUserGet not implemented")
}
func (*UnimplementedV1Server) DatabaseUserUpdate(context.Context, *DatabaseUser) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUserUpdate not implemented")
}
func (*UnimplementedV1Server) DatabaseUserRegister(context.Context, *DatabaseUser) (*DatabaseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUserRegister not implemented")
}
func (*UnimplementedV1Server) DatabaseUserDeregister(context.Context, *DatabaseUser) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUserDeregister not implemented")
}
func (*UnimplementedV1Server) DatabaseUserVerify(context.Context, *DatabaseUser_Verify) (*DatabaseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUserVerify not implemented")
}
func (*UnimplementedV1Server) RedirectWhisperGroupAdd(context.Context, *RedirectWhisperGroup) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedirectWhisperGroupAdd not implemented")
}
func (*UnimplementedV1Server) RedirectWhisperGroupRemove(context.Context, *RedirectWhisperGroup) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedirectWhisperGroupRemove not implemented")
}

func RegisterV1Server(s *grpc.Server, srv V1Server) {
	s.RegisterService(&_V1_serviceDesc, srv)
}

func _V1_GetUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).GetUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/GetUptime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).GetUptime(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).GetVersion(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_Events_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).Events(m, &v1EventsServer{stream})
}

type V1_EventsServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type v1EventsServer struct {
	grpc.ServerStream
}

func (x *v1EventsServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _V1_ServerCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ServerCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ServerCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ServerCreate(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ServerQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ServerQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ServerQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ServerQuery(ctx, req.(*Server_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ServerGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ServerGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ServerGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ServerGet(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ServerStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ServerStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ServerStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ServerStart(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ServerStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ServerStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ServerStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ServerStop(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ServerRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ServerRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ServerRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ServerRemove(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ServerEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Server)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).ServerEvents(m, &v1ServerEventsServer{stream})
}

type V1_ServerEventsServer interface {
	Send(*Server_Event) error
	grpc.ServerStream
}

type v1ServerEventsServer struct {
	grpc.ServerStream
}

func (x *v1ServerEventsServer) Send(m *Server_Event) error {
	return x.ServerStream.SendMsg(m)
}

func _V1_ContextActionAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ContextActionAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ContextActionAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ContextActionAdd(ctx, req.(*ContextAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ContextActionRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ContextActionRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ContextActionRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ContextActionRemove(ctx, req.(*ContextAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ContextActionEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContextAction)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(V1Server).ContextActionEvents(m, &v1ContextActionEventsServer{stream})
}

type V1_ContextActionEventsServer interface {
	Send(*ContextAction) error
	grpc.ServerStream
}

type v1ContextActionEventsServer struct {
	grpc.ServerStream
}

func (x *v1ContextActionEventsServer) Send(m *ContextAction) error {
	return x.ServerStream.SendMsg(m)
}

func _V1_TextMessageSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).TextMessageSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/TextMessageSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).TextMessageSend(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_TextMessageFilter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1Server).TextMessageFilter(&v1TextMessageFilterServer{stream})
}

type V1_TextMessageFilterServer interface {
	Send(*TextMessage_Filter) error
	Recv() (*TextMessage_Filter, error)
	grpc.ServerStream
}

type v1TextMessageFilterServer struct {
	grpc.ServerStream
}

func (x *v1TextMessageFilterServer) Send(m *TextMessage_Filter) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v1TextMessageFilterServer) Recv() (*TextMessage_Filter, error) {
	m := new(TextMessage_Filter)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _V1_LogQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).LogQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/LogQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).LogQuery(ctx, req.(*Log_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Server)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ConfigGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ConfigGet(ctx, req.(*Server))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ConfigGetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_Field)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ConfigGetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ConfigGetField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ConfigGetField(ctx, req.(*Config_Field))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ConfigSetField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config_Field)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ConfigSetField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ConfigSetField",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ConfigSetField(ctx, req.(*Config_Field))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ConfigGetDefault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ConfigGetDefault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ConfigGetDefault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ConfigGetDefault(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ChannelQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ChannelQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ChannelQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ChannelQuery(ctx, req.(*Channel_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ChannelGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ChannelGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ChannelGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ChannelGet(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ChannelAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ChannelAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ChannelAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ChannelAdd(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ChannelRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ChannelRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ChannelRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ChannelRemove(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ChannelUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ChannelUpdate(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/UserQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UserQuery(ctx, req.(*User_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_UserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/UserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UserGet(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UserUpdate(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_UserKick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User_Kick)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).UserKick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/UserKick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).UserKick(ctx, req.(*User_Kick))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_TreeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tree_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).TreeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/TreeQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).TreeQuery(ctx, req.(*Tree_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_BansGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ban_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).BansGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/BansGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).BansGet(ctx, req.(*Ban_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_BansSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ban_List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).BansSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/BansSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).BansSet(ctx, req.(*Ban_List))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ACLGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Channel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ACLGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ACLGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ACLGet(ctx, req.(*Channel))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ACLSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACL_List)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ACLSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ACLSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ACLSet(ctx, req.(*ACL_List))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ACLGetEffectivePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACL_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ACLGetEffectivePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ACLGetEffectivePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ACLGetEffectivePermissions(ctx, req.(*ACL_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ACLAddTemporaryGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACL_TemporaryGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ACLAddTemporaryGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ACLAddTemporaryGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ACLAddTemporaryGroup(ctx, req.(*ACL_TemporaryGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_ACLRemoveTemporaryGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ACL_TemporaryGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).ACLRemoveTemporaryGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/ACLRemoveTemporaryGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).ACLRemoveTemporaryGroup(ctx, req.(*ACL_TemporaryGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_AuthenticatorStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(V1Server).AuthenticatorStream(&v1AuthenticatorStreamServer{stream})
}

type V1_AuthenticatorStreamServer interface {
	Send(*Authenticator_Request) error
	Recv() (*Authenticator_Response, error)
	grpc.ServerStream
}

type v1AuthenticatorStreamServer struct {
	grpc.ServerStream
}

func (x *v1AuthenticatorStreamServer) Send(m *Authenticator_Request) error {
	return x.ServerStream.SendMsg(m)
}

func (x *v1AuthenticatorStreamServer) Recv() (*Authenticator_Response, error) {
	m := new(Authenticator_Response)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _V1_DatabaseUserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUser_Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).DatabaseUserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/DatabaseUserQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).DatabaseUserQuery(ctx, req.(*DatabaseUser_Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_DatabaseUserGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).DatabaseUserGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/DatabaseUserGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).DatabaseUserGet(ctx, req.(*DatabaseUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_DatabaseUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).DatabaseUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/DatabaseUserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).DatabaseUserUpdate(ctx, req.(*DatabaseUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_DatabaseUserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).DatabaseUserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/DatabaseUserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).DatabaseUserRegister(ctx, req.(*DatabaseUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_DatabaseUserDeregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).DatabaseUserDeregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/DatabaseUserDeregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).DatabaseUserDeregister(ctx, req.(*DatabaseUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_DatabaseUserVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUser_Verify)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).DatabaseUserVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/DatabaseUserVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).DatabaseUserVerify(ctx, req.(*DatabaseUser_Verify))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_RedirectWhisperGroupAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectWhisperGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).RedirectWhisperGroupAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/RedirectWhisperGroupAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).RedirectWhisperGroupAdd(ctx, req.(*RedirectWhisperGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _V1_RedirectWhisperGroupRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedirectWhisperGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(V1Server).RedirectWhisperGroupRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MurmurRPC.V1/RedirectWhisperGroupRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(V1Server).RedirectWhisperGroupRemove(ctx, req.(*RedirectWhisperGroup))
	}
	return interceptor(ctx, in, info, handler)
}

var _V1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MurmurRPC.V1",
	HandlerType: (*V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUptime",
			Handler:    _V1_GetUptime_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _V1_GetVersion_Handler,
		},
		{
			MethodName: "ServerCreate",
			Handler:    _V1_ServerCreate_Handler,
		},
		{
			MethodName: "ServerQuery",
			Handler:    _V1_ServerQuery_Handler,
		},
		{
			MethodName: "ServerGet",
			Handler:    _V1_ServerGet_Handler,
		},
		{
			MethodName: "ServerStart",
			Handler:    _V1_ServerStart_Handler,
		},
		{
			MethodName: "ServerStop",
			Handler:    _V1_ServerStop_Handler,
		},
		{
			MethodName: "ServerRemove",
			Handler:    _V1_ServerRemove_Handler,
		},
		{
			MethodName: "ContextActionAdd",
			Handler:    _V1_ContextActionAdd_Handler,
		},
		{
			MethodName: "ContextActionRemove",
			Handler:    _V1_ContextActionRemove_Handler,
		},
		{
			MethodName: "TextMessageSend",
			Handler:    _V1_TextMessageSend_Handler,
		},
		{
			MethodName: "LogQuery",
			Handler:    _V1_LogQuery_Handler,
		},
		{
			MethodName: "ConfigGet",
			Handler:    _V1_ConfigGet_Handler,
		},
		{
			MethodName: "ConfigGetField",
			Handler:    _V1_ConfigGetField_Handler,
		},
		{
			MethodName: "ConfigSetField",
			Handler:    _V1_ConfigSetField_Handler,
		},
		{
			MethodName: "ConfigGetDefault",
			Handler:    _V1_ConfigGetDefault_Handler,
		},
		{
			MethodName: "ChannelQuery",
			Handler:    _V1_ChannelQuery_Handler,
		},
		{
			MethodName: "ChannelGet",
			Handler:    _V1_ChannelGet_Handler,
		},
		{
			MethodName: "ChannelAdd",
			Handler:    _V1_ChannelAdd_Handler,
		},
		{
			MethodName: "ChannelRemove",
			Handler:    _V1_ChannelRemove_Handler,
		},
		{
			MethodName: "ChannelUpdate",
			Handler:    _V1_ChannelUpdate_Handler,
		},
		{
			MethodName: "UserQuery",
			Handler:    _V1_UserQuery_Handler,
		},
		{
			MethodName: "UserGet",
			Handler:    _V1_UserGet_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _V1_UserUpdate_Handler,
		},
		{
			MethodName: "UserKick",
			Handler:    _V1_UserKick_Handler,
		},
		{
			MethodName: "TreeQuery",
			Handler:    _V1_TreeQuery_Handler,
		},
		{
			MethodName: "BansGet",
			Handler:    _V1_BansGet_Handler,
		},
		{
			MethodName: "BansSet",
			Handler:    _V1_BansSet_Handler,
		},
		{
			MethodName: "ACLGet",
			Handler:    _V1_ACLGet_Handler,
		},
		{
			MethodName: "ACLSet",
			Handler:    _V1_ACLSet_Handler,
		},
		{
			MethodName: "ACLGetEffectivePermissions",
			Handler:    _V1_ACLGetEffectivePermissions_Handler,
		},
		{
			MethodName: "ACLAddTemporaryGroup",
			Handler:    _V1_ACLAddTemporaryGroup_Handler,
		},
		{
			MethodName: "ACLRemoveTemporaryGroup",
			Handler:    _V1_ACLRemoveTemporaryGroup_Handler,
		},
		{
			MethodName: "DatabaseUserQuery",
			Handler:    _V1_DatabaseUserQuery_Handler,
		},
		{
			MethodName: "DatabaseUserGet",
			Handler:    _V1_DatabaseUserGet_Handler,
		},
		{
			MethodName: "DatabaseUserUpdate",
			Handler:    _V1_DatabaseUserUpdate_Handler,
		},
		{
			MethodName: "DatabaseUserRegister",
			Handler:    _V1_DatabaseUserRegister_Handler,
		},
		{
			MethodName: "DatabaseUserDeregister",
			Handler:    _V1_DatabaseUserDeregister_Handler,
		},
		{
			MethodName: "DatabaseUserVerify",
			Handler:    _V1_DatabaseUserVerify_Handler,
		},
		{
			MethodName: "RedirectWhisperGroupAdd",
			Handler:    _V1_RedirectWhisperGroupAdd_Handler,
		},
		{
			MethodName: "RedirectWhisperGroupRemove",
			Handler:    _V1_RedirectWhisperGroupRemove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Events",
			Handler:       _V1_Events_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerEvents",
			Handler:       _V1_ServerEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ContextActionEvents",
			Handler:       _V1_ContextActionEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TextMessageFilter",
			Handler:       _V1_TextMessageFilter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AuthenticatorStream",
			Handler:       _V1_AuthenticatorStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "MurmurRPC.proto",
}
